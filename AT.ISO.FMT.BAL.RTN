*-----------------------------------------------------------------------------
* <Rating>19</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE AT.ISO.FMT.BAL.RTN(R.ACCT,BALANCE.FORMATTED,FUTURE.USE)
*
    $INSERT T24.BP I_COMMON
    $INSERT T24.BP I_EQUATE
    $INSERT T24.BP I_F.ACCOUNT
    $INSERT T24.BP I_F.ACCOUNT.CLASS
    $INSERT T24.BP I_F.CURRENCY
    $INCLUDE ATM.BP I_AT.ISO.COMMON
    $INCLUDE ATM.BP I_F.ATM.PARAMETER
    $INCLUDE ATM.BP I_F.ATM.CHARGE.TABLE
*-----------------------------------------------------------------------------------
* 06/10/19  Nuha Tuhul       check BIN.NO not in  BIN.OUR
*------------------------------------------------------------------------------------------*

    GOSUB INITIALISE
    GOSUB PROCESS
    RETURN

*------------------------------------------------------------------------------------------*
*
INITIALISE:
*--------*

    FN.ACCOUNT.CLASS = 'F.ACCOUNT.CLASS'
    CALL OPF(FN.ACCOUNT.CLASS,F.ACCOUNT.CLASS)
*
    FN.CURRENCY = 'FBNK.CURRENCY'
**    CALL OPF(FN.CURRENCY,F.CURRENCY)
    OPEN FN.CURRENCY TO F.CURRENCY ELSE
        CRT "ERROR IN OPEN"
    END
*
    CALL CACHE.READ(FN.ACCOUNT.CLASS,'SAVINGS',R.ACCT.CLASS,ER.AC.CLASS)
    SAV.ACCT.CATEG = R.ACCT.CLASS<AC.CLS.CATEGORY>

    FN.ATM.PARAMETER = 'F.ATM.PARAMETER'
    CALL OPF(FN.ATM.PARAMETER,F.ATM.PARAMETER)

    CALL CACHE.READ(FN.ATM.PARAMETER,'SYSTEM',R.ATM.PARAMETER,ER.ATM.PARAMETER)
    OUR.BIN = R.ATM.PARAMETER<ATM.PARA.BANK.IMD>

    FN.ATM.CHARGE.TABLE = 'F.ATM.CHARGE.TABLE'
    F.ATM.CHARGE.TABLE = ''
    CALL OPF(FN.ATM.CHARGE.TABLE,F.ATM.CHARGE.TABLE)


    RETURN          ;*From Initialise

*------------------------------------------------------------------------------------------*
PROCESS:
*------------------------------------------------------------------------------------------*


    CCY.CODE = R.ACCT<AC.CURRENCY>
    CALL CACHE.READ(FN.CURRENCY,CCY.CODE,R.CCY,ER.CCY)
    NUM.CCY = R.CCY<EB.CUR.NUMERIC.CCY.CODE>
    NUM.CCY = FMT(NUM.CCY,'R%3')
    NO.OF.DEC = R.CCY<EB.CUR.NO.OF.DECIMALS>
    NO.OF.AMT = 12 - NO.OF.DEC

    ACCATEG = R.ACCT<AC.CATEGORY>

    ACC.TYPE='10'
    WRK.AMT.TYPE='02'
    LED.AMT.TYPE='01'
    UNCLEAR.AMT.TYPE='03'

    WRK.BAL = R.ACCT<AC.WORKING.BALANCE>
    LED.BAL = R.ACCT<AC.ONLINE.ACTUAL.BAL>
    ONLINE.CLEAR.BAL = R.ACCT<AC.ONLINE.CLEARED.BAL>
    UNCLEAR.BAL = ONLINE.CLEAR.BAL - LED.BAL

**    CALL AT.CALC.AVAIL.BALANCE(R.ACCT,WRK.BAL,AVAIL.BAL)
    CALL CAB.ICBS.AVAIL.BALANCE(ACCT.ID,R.ACCT,WRK.BAL,AVAIL.BAL)

    BIN.NO = AT$INCOMING.ISO.REQ(32)

**    IF BIN.NO NE OUR.BIN THEN
    LOCATE BIN.NO IN OUR.BIN<1,1> SETTING POS ELSE
        GOSUB CHECK.CHG.AMT
        IF COMM.AMT NE '' THEN
            IF COMM.AMT GT AVAIL.BAL THEN
                AT$AT.ISO.RESP.CODE = 46
                RETURN
            END
        END
    END

    IF AVAIL.BAL LE '0' THEN
        AVAIL.BAL.SIGN ='D'
    END ELSE
        AVAIL.BAL.SIGN ='C'
    END

    AVAIL.BAL = ABS(AVAIL.BAL)

    IF LED.BAL LE '0' THEN
        LED.BAL.SIGN ='D'
    END ELSE
        LED.BAL.SIGN ='C'
    END

    LED.BAL = ABS(LED.BAL)

    IF UNCLEAR.BAL LE '0' THEN
        UNCLEAR.BAL.SIGN ='D'
    END ELSE
        UNCLEAR.BAL.SIGN ='C'
    END

    UNCLEAR.BAL = ABS(UNCLEAR.BAL)

    BALANCE.TO.FMT = AVAIL.BAL

    BALANCE.FMT1 = FIELD(BALANCE.TO.FMT,'.',1)
    BALANCE.FMT2 = FIELD(BALANCE.TO.FMT,'.',2)
    BALANCE.FMT1 = FMT(BALANCE.FMT1,'R%':NO.OF.AMT)
    BALANCE.FMT2 = FMT(BALANCE.FMT2,'L%':NO.OF.DEC)
    BALANCE.FMT = BALANCE.FMT1:BALANCE.FMT2

*    BALANCE.FMT=BALANCE.FMT1
    AVAIL.BAL = BALANCE.FMT

    LED.BALANCE.TO.FMT = LED.BAL

    LED.BALANCE.FMT1 = FIELD(LED.BALANCE.TO.FMT,'.',1)
    LED.BALANCE.FMT2 = FIELD(LED.BALANCE.TO.FMT,'.',2)
    LED.BALANCE.FMT1 = FMT(LED.BALANCE.FMT1,'R%':NO.OF.AMT)
    LED.BALANCE.FMT2 = FMT(LED.BALANCE.FMT2,'L%':NO.OF.DEC)
    LED.BALANCE.FMT = LED.BALANCE.FMT1:LED.BALANCE.FMT2

    LED.BAL = LED.BALANCE.FMT

    UNCLEAR.BALANCE.TO.FMT = UNCLEAR.BAL

    UNCLEAR.BALANCE.FMT1 = FIELD(UNCLEAR.BALANCE.TO.FMT,'.',1)
    UNCLEAR.BALANCE.FMT2 = FIELD(UNCLEAR.BALANCE.TO.FMT,'.',2)
    UNCLEAR.BALANCE.FMT1 = FMT(UNCLEAR.BALANCE.FMT1,'R%':NO.OF.AMT)
    UNCLEAR.BALANCE.FMT2 = FMT(UNCLEAR.BALANCE.FMT2,'L%':NO.OF.DEC)
    UNCLEAR.BALANCE.FMT = UNCLEAR.BALANCE.FMT1:UNCLEAR.BALANCE.FMT2

    UNCLEAR.BAL = UNCLEAR.BALANCE.FMT

*    BALANCE.FORMATTED =ACC.TYPE:LED.AMT.TYPE:NUM.CCY:LED.BAL.SIGN:LED.BAL:ACC.TYPE:WRK.AMT.TYPE:NUM.CCY:AVAIL.BAL.SIGN:AVAIL.BAL
    BALANCE.FORMATTED = ACC.TYPE:WRK.AMT.TYPE:NUM.CCY:AVAIL.BAL.SIGN:AVAIL.BAL:ACC.TYPE:LED.AMT.TYPE:NUM.CCY:LED.BAL.SIGN:LED.BAL

    RETURN          ;*From process

*------------------------------------------------------------------------------------------*
CHECK.CHG.AMT:
*------------------------------------------------------------------------------------------*
    MTI.CODE = AT$AT.REQ.MAP.ID[4,4]
    NETWORK.TYPE = AT$INCOMING.ISO.REQ(48)
    NETWORK.TYPE = TRIM(NETWORK.TYPE," ","B")
*    NETWORK.TYPE = "NETWORK":".":NETWORK.TYPE
    NETWORK.TYPE = NETWORK.TYPE:MTI.CODE

    PROC.CODE = AT$INCOMING.ISO.REQ(3)
    PROC.CODE = PROC.CODE[1,2]

    R.ATM.CHARGE.TABLE = ''
    R.ATM.CHARGE.TABLE.ERR = ''
    COMM.AMT = ''

    CALL CACHE.READ(FN.ATM.CHARGE.TABLE,NETWORK.TYPE,R.ATM.CHARGE.TABLE,R.ATM.CHARGE.TABLE.ERR)

    IF R.ATM.CHARGE.TABLE NE '' THEN
        FINDSTR PROC.CODE IN R.ATM.CHARGE.TABLE<AT.CHG.PROC.CODE> SETTING PROC.CODE.FM.POS,PROC.CODE.VM.POS THEN
            BEGIN CASE
            CASE R.ATM.CHARGE.TABLE<AT.CHG.COMM.AMT,PROC.CODE.VM.POS,1> NE ''
                COMM.AMT = R.ATM.CHARGE.TABLE<AT.CHG.COMM.AMT,PROC.CODE.VM.POS,1>
                COMM.AMT = COMM.AMT[4,LEN(COMM.AMT)-3]
            CASE R.ATM.CHARGE.TABLE<AT.CHG.COMM.PERC,PROC.CODE.VM.POS,1> NE ''
                COMM.PERC = R.ATM.CHARGE.TABLE<AT.CHG.COMM.PERC,PROC.CODE.VM.POS,1>
                TXN.AMT = ''
                TXN.AMT = AT$INCOMING.ISO.REQ(4)
                IF TXN.AMT NE '' THEN
                    TXN.AMT = TRIM(TXN.AMT,"0","L")
                    TXN.AMT = TXN.AMT/1000
                    COMM.AMT = (TXN.AMT * COMM.PERC) / 100
                END
            CASE R.ATM.CHARGE.TABLE<AT.CHG.INCOMING.VALUE,PROC.CODE.VM.POS,1> NE ''
                FLD.MSG.POSN = R.ATM.CHARGE.TABLE<AT.CHG.INCOMING.VALUE,PROC.CODE.VM.POS,1>
                YR.FIELD = ''
                YR.FIELD.POSN = ''
                COMM.CCY = FIELD(FLD.MSG.POSN,'*',1)
                COMM.CCY = COMM.CCY[2,999]
                YR.FIELD.POSN = FIELD(FLD.MSG.POSN,'*',2)
                YR.FIELD = AT$INCOMING.ISO.REQ(YR.FIELD.POSN)
                COMM.DETS = COMM.CCY:'%':YR.FIELD
                CALL AT.GET.COM.AMT(COMM.DETS,COMM.AMT)
                COMM.AMT = COMM.AMT[4,999]
            CASE OTHERWISE
                RETURN

            END CASE
        END
    END



    RETURN
*------------------------------------------------------------------------------------------*
