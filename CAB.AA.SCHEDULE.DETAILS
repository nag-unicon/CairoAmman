    SUBROUTINE CAB.AA.SCHEDULE.DETAILS(AAA.ID)

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_CAB.AA.SCHEDULE.DETAILS.COMMON
    $INSERT I_F.AA.ARRANGEMENT.ACTIVITY
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.AA.INTEREST
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.COMPANY
    $INSERT I_F.CUSTOMER

    GOSUB GET.REQUIRED.INFO
    GOSUB GET.ACCOUNT.DETAILS
    GOSUB GET.INTEREST.DETAILS
    GOSUB PROCESS

    RETURN

GET.REQUIRED.INFO:

    R.AA.ARRANGEMENT.ACTIVITY = ""
    ERR.AA.ARRANGEMENT.ACTIVITY = ""

    CALL F.READ(FN.AA.ARRANGEMENT.ACTIVITY, AAA.ID, R.AA.ARRANGEMENT.ACTIVITY, F.AA.ARRANGEMENT.ACTIVITY, ERR.AA.ARRANGEMENT.ACTIVITY)

    ARRANGEMENT.ID    = R.AA.ARRANGEMENT.ACTIVITY<AA.ARR.ACT.ARRANGEMENT>
    DISBURSEMENT.DATE = R.AA.ARRANGEMENT.ACTIVITY<AA.ARR.ACT.EFFECTIVE.DATE>

    R.AA.ARRANGEMENT = ""
    ERR.AA.ARRANGEMENT = ""
    CALL F.READ(FN.AA.ARRANGEMENT, ARRANGEMENT.ID, R.AA.ARRANGEMENT, F.AA.ARRANGEMENT, ERR.AA.ARRANGEMENT)

    RCompany = ""
    ErrCompany = ""

    CALL F.READ(FN.COMPANY, R.AA.ARRANGEMENT<AA.ARR.CO.CODE>, RCompany, F.COMPANY, ErrCompany)

    ACCOUNT.ID = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID, 1>

    CompanyName = RCompany<EB.COM.COMPANY.NAME,1>

    R.CUSTOMER = ""
    ERR.CUSTOMER = ""
    CALL F.READ(FN.CUSTOMER, R.AA.ARRANGEMENT<AA.ARR.CUSTOMER, 1>, R.CUSTOMER, F.CUSTOMER, ERR.CUSTOMER)

    RETURN

GET.ACCOUNT.DETAILS:

    R.AA.ACCOUNT.DETAILS = ""
    ERR.AA.ACCOUNT.DETAILS = ""

    CALL F.READ(FN.AA.ACCOUNT.DETAILS, ARRANGEMENT.ID, R.AA.ACCOUNT.DETAILS, F.AA.ACCOUNT.DETAILS, ERR.AA.ACCOUNT.DETAILS)

    MATURITY.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.MATURITY.DATE>
    PAYMENT.START.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.PAYMENT.START.DATE>

    BALANCE.TO.CHECK = "TOTCOMMITMENT"
    START.DATE = R.AA.ACCOUNT.DETAILS<AA.AD.START.DATE>
    END.DATE = ""
    BAL.DETAILS = ""

    CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, REQUEST.TYPE, START.DATE, END.DATE, SYSTEM.DATE, BAL.DETAILS, ERROR.MESSAGE)

    COMMITMENT.AMOUNT = ABS(BAL.DETAILS<4>)

    IF DISBURSEMENT.DATE GT START.DATE THEN       ;* When Current Disbursement Date and First Disbursement is not same.

        BALANCE.TO.CHECK = "TOTCOMMITMENT"
        START.DATE = DISBURSEMENT.DATE
        END.DATE = ""
        BAL.DETAILS = ""

        CALL AA.GET.PERIOD.BALANCES(ACCOUNT.ID, BALANCE.TO.CHECK, REQUEST.TYPE, START.DATE, END.DATE, SYSTEM.DATE, BAL.DETAILS, ERROR.MESSAGE)

        IF ABS(BAL.DETAILS<4>) GT COMMITMENT.AMOUNT THEN
            GOSUB PROGRAM.END
        END

    END

    RETURN

GET.INTEREST.DETAILS:

    returnIds = ""
    R.AA.INTEREST = ""
    returnError = ""

    idPropertyClass = "INTEREST"
    idProperty = "PRINCIPALINT"
    returnConditions = ""

    CALL AA.GET.ARRANGEMENT.CONDITIONS(ARRANGEMENT.ID, idPropertyClass, idProperty, effectiveDate, returnIds, returnConditions, returnError)

    R.AA.INTEREST = RAISE(returnConditions)
    INT.RATE = R.AA.INTEREST<AA.INT.EFFECTIVE.RATE>
    MIN.RATE = R.AA.INTEREST<AA.INT.TIER.MIN.RATE,1>
    MAX.RATE = R.AA.INTEREST<AA.INT.TIER.MAX.RATE,1>

    IF R.AA.INTEREST<AA.INT.FLOATING.INDEX> NE '' THEN      ;* Floating Interest

        INTEREST.RATE.KEY = R.AA.INTEREST<AA.INT.FLOATING.INDEX> : R.AA.ARRANGEMENT<AA.ARR.CURRENCY> : effectiveDate

        CALL EB.GET.INTEREST.RATE(INTEREST.RATE.KEY, INT.RATE)

        GOSUB GET.MARGIN.CAL
        GOSUB GET.MIN.MAX.CHECK

    END

    RETURN

GET.MARGIN.CAL:

*** Currently code consider only first margin type, and add/sub
*** In future it may extend based on the requirement

    IF R.AA.INTEREST<AA.INT.MARGIN.TYPE,1,1> EQ 'SINGLE' THEN

        BEGIN CASE

        CASE R.AA.INTEREST<AA.INT.MARGIN.OPER,1,1> EQ 'ADD'
            INT.RATE + = R.AA.INTEREST<AA.INT.MARGIN.RATE,1,1>

        CASE R.AA.INTEREST<AA.INT.MARGIN.OPER,1,1> EQ 'SUB'
            INT.RATE  - = R.AA.INTEREST<AA.INT.MARGIN.RATE,1,1>

        CASE R.AA.INTEREST<AA.INT.MARGIN.OPER,1,1> EQ 'MULTIPLY'

            IF MOD(INT.RATE,R.AA.INTEREST<AA.INT.MARGIN.RATE,1,1>) = 0 THEN
            END ELSE
                INT.RATE = (FIELD((INT.RATE / R.AA.INTEREST<AA.INT.MARGIN.RATE,1,1>),'.',1) + 1) * R.AA.INTEREST<AA.INT.MARGIN.RATE,1,1>
            END
        END CASE
    END

    RETURN

GET.MIN.MAX.CHECK:

    IF INT.RATE AND MIN.RATE THEN       ;*** Interest rate minimum rate
        IF INT.RATE < MIN.RATE THEN
            INT.RATE = MIN.RATE
        END
    END

    IF INT.RATE AND MAX.RATE THEN       ;*** Interest rate maximum rate
        IF INT.RATE > MAX.RATE THEN
            INT.RATE = MAX.RATE
        END
    END

    RETURN

PROCESS:

    SCHEDULE.DETAILS = ""
    CALL CAB.E.AA.SCHEDULE.PROJECTOR(ARRANGEMENT.ID, SCHEDULE.DETAILS)

    DISBURSEMENT.DATE = ICONV(DISBURSEMENT.DATE,'D')
    DISBURSEMENT.DATE = FMT(DISBURSEMENT.DATE,'D4')

    MATURITY.DATE = ICONV(MATURITY.DATE,'D')
    MATURITY.DATE = FMT(MATURITY.DATE,'D4')

    PAYMENT.START.DATE = ICONV(PAYMENT.START.DATE,'D')
    PAYMENT.START.DATE = FMT(PAYMENT.START.DATE,'D4')

    GOSUB GET.INSTALLMENT.DETAILS

    IF R.AA.ARRANGEMENT THEN

        GOSUB ASSIGN.HEADER.DETAILS


        SCHEDULE.DETS<-1> = SCHEDULE.DETAILS

        Y.FLAT.ID = ARRANGEMENT.ID :".csv"

        F.FILE.PATH = ""

        OPEN FN.FILE.PATH TO F.FILE.PATH ELSE
            CREATE F.FILE.PATH ELSE
                NULL
            END
        END

        WRITE SCHEDULE.DETS ON F.FILE.PATH,Y.FLAT.ID ON ERROR
            PRINT "UNABLE TO WRITE TO ":F.FILE.PATH
        END

    END

    RETURN

ASSIGN.HEADER.DETAILS:

    DELIM = ","

    IF  R.CUSTOMER<EB.CUS.LANGUAGE>  EQ  '1'  THEN
        YR.SHORT.NAME  = R.CUSTOMER<EB.CUS.SHORT.NAME,1>
    END ELSE
        YR.SHORT.NAME  = R.CUSTOMER<EB.CUS.SHORT.NAME,2>
    END

    SCHEDULE.DETS     = "Payment Schedule" :DELIM: CompanyName:DELIM: "ShortName" :DELIM: YR.SHORT.NAME
    SCHEDULE.DETS<-1> = "Customer" :DELIM: R.AA.ARRANGEMENT<AA.ARR.CUSTOMER,1> :DELIM: "Currency" :DELIM: R.AA.ARRANGEMENT<AA.ARR.CURRENCY> :DELIM: "Customer Language" :DELIM: R.CUSTOMER<EB.CUS.LANGUAGE>:DELIM: "SMS" :DELIM: R.CUSTOMER<EB.CUS.SMS.1,1>
    SCHEDULE.DETS<-1> = "Arrangement" :DELIM: ARRANGEMENT.ID :DELIM: "Account" :DELIM: R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID, 1>
    SCHEDULE.DETS<-1> = "Number of Installment" :DELIM: InstallmentCount :DELIM: "Interest Rate" :DELIM: INT.RATE
    SCHEDULE.DETS<-1> = "Disbursement Date" :DELIM: DISBURSEMENT.DATE :DELIM: "Maturity Date":DELIM: MATURITY.DATE
    SCHEDULE.DETS<-1> = "First Installment" :DELIM: PAYMENT.START.DATE :DELIM: "Total Principal" :DELIM: COMMITMENT.AMOUNT        ;* TotalPrincipalAmount
    SCHEDULE.DETS<-1> = "Payment Date" :DELIM: "Total Due"   :DELIM: "Total Cap"  :DELIM: "Principal"   :DELIM: "Interest"   :DELIM: "Charge"     :DELIM: "Outstanding"

    RETURN

GET.INSTALLMENT.DETAILS:

    TOTAL.INSTALLMENT.CNT = DCOUNT(SCHEDULE.DETAILS, FM)

    REC.CNT = 1

    InstallmentCount = 0
    TotalPrincipalAmount = 0

    LOOP
    WHILE REC.CNT LE TOTAL.INSTALLMENT.CNT


        IF FIELD(SCHEDULE.DETAILS<REC.CNT>, ",", 4) OR FIELD(SCHEDULE.DETAILS<REC.CNT>, ",", 5) THEN          ;* Either Principal or Interest

            InstallmentCount + = 1

            IF FIELD(SCHEDULE.DETAILS<REC.CNT>, ",", 4) THEN
                TotalPrincipalAmount + = FIELD(SCHEDULE.DETAILS<REC.CNT>, ",", 4)
            END
        END

        REC.CNT + = 1
    REPEAT

    RETURN

PROGRAM.END:

    RETURN TO PROGRAM.END

END
