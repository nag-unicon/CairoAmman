    SUBROUTINE CAB.B.VISA.REVOLV.UPLOAD.PRE
    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE T24.BP I_F.ACCOUNT
    $INCLUDE BP I_F.CAB.TEMP.VISA.TRANS
    $INCLUDE BP I_F.CAB.VISA.BRANCH.ACCTS
    $INCLUDE T24.BP I_F.ALTERNATE.ACCOUNT
    $INCLUDE CAB.BP I_CAB.B.VISA.REVOLV.UPLOAD.COMMON

    GOSUB OPEN.FILES
    GOSUB INIT.FILES
    GOSUB UPDATE.TEMP
    RETURN
***********
INIT.FILES:
***********

    CLR.FILE = 'CLEAR.FILE F.CAB.TEMP.VISA.TRANS'
    EXECUTE CLR.FILE
*    DEL.FILE = 'DELETE F.CAB.TEMP.VISA.TRANS'
*    EXECUTE DEL.FILE

    SEL.CMD = 'SELECT ' : FN.CAB.VISA.BRANCH.ACCTS
    CALL EB.READLIST(SEL.CMD,SEL.LIST, '',REC.NO,SEL.ERR)

    LOOP
        REMOVE BRANCH.ID FROM SEL.LIST SETTING POS
    WHILE BRANCH.ID:POS
        CALL F.READ(FN.CAB.VISA.BRANCH.ACCTS,BRANCH.ID,VISA.BRANCH.REC,F.CAB.VISA.BRANCH.ACCTS,VISA.ERR)
        VISA.BRANCH.REC<CAB.VISA.TOTAL.AMOUNT> = ''
        WRITE VISA.BRANCH.REC TO F.CAB.VISA.BRANCH.ACCTS,BRANCH.ID
    REPEAT
    RETURN


***********
OPEN.FILES:
***********

    F.CAB.VISA.BRANCH.ACCTS = ''
    FN.CAB.VISA.BRANCH.ACCTS = 'F.CAB.VISA.BRANCH.ACCTS'
    CALL OPF(FN.CAB.VISA.BRANCH.ACCTS,F.CAB.VISA.BRANCH.ACCTS)

    F.CAB.TEMP.VISA.TRANS = ''
    FN.CAB.TEMP.VISA.TRANS = 'F.CAB.TEMP.VISA.TRANS'
    CALL OPF(FN.CAB.TEMP.VISA.TRANS,F.CAB.TEMP.VISA.TRANS)

    FN.ALTERNATE.ACCOUNT = 'F.ALTERNATE.ACCOUNT'
    F.ALTERNATE.ACCOUNT = ''
    CALL OPF(FN.ALTERNATE.ACCOUNT,F.ALTERNATE.ACCOUNT)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    VISA.FILE.NAME = 'Levy'
    VISA.FILE.PATH = 'VISA.UPLOAD'
    VISA.ERROR.NAME = 'Levy.REJ.':TODAY
    Y.COUNT = 0
    Y.VISA.BRANCH = ''
    Y.ACCT.ID = ''
    OUT.PATH = 'VISA.UPLOAD'
    OUT.NAME = 'VISA_OUT.txt'

    OPENSEQ OUT.PATH,OUT.NAME TO OUT.FILE ELSE
        CREATE OUT.FILE ELSE
            STOP
        END
    END

    OPENSEQ VISA.FILE.PATH,VISA.FILE.NAME TO VISA.FILE ELSE
        CRT 'File Not Found In The Path - Missing File'
        STOP
    END
    OPENSEQ VISA.FILE.PATH,VISA.ERROR.NAME TO VISA.ERROR ELSE
        CREATE VISA.ERROR ELSE
            STOP
        END
    END

    RETURN

**************
UPDATE.TEMP:
**************
    EOF = 0
    LOOP
        READSEQ INREC FROM VISA.FILE ELSE EOF=1
    WHILE NOT(EOF)
        Y.ACCT.ID = INREC[101,13]
        CALL F.READ(FN.ALTERNATE.ACCOUNT,Y.ACCT.ID,ALT.ACCT.REC,F.ALTERNATE.ACCOUNT,ALT.ERR)
        IF ALT.ACCT.REC THEN
            T.ACCT.ID = ALT.ACCT.REC
        END ELSE
            T.ACCT.ID = INREC[101,12]
        END

        CALL F.READ(FN.ACCOUNT,T.ACCT.ID,R.ACCOUNT,F.ACCOUNT,ACCT.ERR)
        IF R.ACCOUNT<AC.CATEGORY> EQ '7002' OR R.ACCOUNT<AC.CATEGORY> EQ '1054' THEN
            Y.COUNTER +=1
            R.TEMP.VISA<CAB.VTRN.DR.ACCT> = T.ACCT.ID
            CALL F.READ(FN.CAB.VISA.BRANCH.ACCTS,R.ACCOUNT<AC.CO.CODE>,VISA.BRANCH.REC,F.CAB.VISA.BRANCH.ACCTS,VISA.ERR)
            IF VISA.BRANCH.REC THEN
                R.TEMP.VISA<CAB.VTRN.CR.ACCT> = VISA.BRANCH.REC<CAB.VISA.SUNDRY.ACCT>
                TRANS.AMNT = (INREC[125,15])/1000
!!                R.TEMP.VISA<CAB.VTRN.AMOUNT> = (INREC[125,15])/1000
                R.TEMP.VISA<CAB.VTRN.AMOUNT> = TRANS.AMNT
                R.TEMP.VISA<CAB.VTRN.SIGN> = INREC[229,1]
                R.TEMP.VISA<CAB.VTRN.ACCT.STATUS> = 'VALID'
                R.TEMP.VISA<CAB.VTRN.BRANCH.CODE> = R.ACCOUNT<AC.CO.CODE>
                R.TEMP.VISA<CAB.VTRN.TRANS.CODE> = VISA.BRANCH.REC<CAB.VISA.CUS.TRANS.CODE>
                R.TEMP.VISA<CAB.VTRN.CUS.CURR> = R.ACCOUNT<AC.CURRENCY>
                IF INREC[229,1] EQ 'C' THEN
                    TRANS.AMNT = TRANS.AMNT * -1
                END
                VISA.BRANCH.REC<CAB.VISA.TOTAL.AMOUNT> += TRANS.AMNT
                WRITE VISA.BRANCH.REC TO F.CAB.VISA.BRANCH.ACCTS,R.ACCOUNT<AC.CO.CODE>
                WRITE R.TEMP.VISA TO F.CAB.TEMP.VISA.TRANS,Y.COUNTER
            END ELSE
                WRITESEQ INREC APPEND TO VISA.ERROR ELSE
                END
            END
        END ELSE
            WRITESEQ INREC APPEND TO VISA.ERROR ELSE
            END
        END

    REPEAT

    RETURN

END
