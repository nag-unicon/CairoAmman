    SUBROUTINE CAB.ANNUAL.CHG.UPD

    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE T24.BP I_F.AA.ARRANGEMENT.ACTIVITY
    $INCLUDE T24.BP I_F.ACCOUNT
    $INCLUDE T24.BP I_F.COMPANY
    $INCLUDE T24.BP I_F.AA.CHARGE
    $INCLUDE T24.BP I_F.AA.TERM.AMOUNT
    $INCLUDE T24.BP I_F.AA.PAYMENT.SCHEDULE
    $INCLUDE T24.BP I_AA.ACTION.CONTEXT
    $INCLUDE T24.BP I_AA.APP.COMMON
    $INCLUDE T24.BP I_AA.CONTRACT.DETAILS
    $INCLUDE T24.BP I_F.EB.ACCRUAL.DATA
    $INCLUDE T24.BP I_F.ACCT.ACTIVITY
    $INCLUDE T24.BP I_AA.ACCRUAL.DATA
    $INCLUDE T24.BP I_F.AA.ARRANGEMENT
    $INCLUDE T24.BP I_F.AA.PAYMENT.TYPE
    $INCLUDE T24.BP I_F.AA.ACCOUNT.DETAILS
    $INCLUDE T24.BP I_F.AA.INTEREST.ACCRUALS
    $INCLUDE T24.BP I_AA.TAX.COMMON
    $INCLUDE T24.BP I_F.AA.PRODUCT.DESIGNER
    $INCLUDE T24.BP I_F.AA.ACCOUNT
    $INCLUDE T24.BP I_F.AA.PROPERTY
    $INCLUDE T24.BP I_F.AA.BILL.DETAILS
    $INCLUDE T24.BP I_GTS.COMMON
    $INCLUDE T24.BP I_F.OFS.SOURCE
********************************************************************************
*  Annual Commission changes routine to calculate and default it incharge property
*
*  27/03/2015  -  Less than One year System crash stoped
*
*
*
*
*
*********************************************************************************
    GOSUB INIT
    GOSUB PROCESS.INIT
    RETURN

INIT:
*****
    PRO.STATUS = c_arrActivityStatus["-",1,1]
    ARRANGEMENT.ID = AA$ARR.ID          ;* Arrangement contract Id
    ACTIVITY.ID = AA$CURR.ACTIVITY
    COMM.PROP = AA$PROPERTY.ID

    EFFECTIVE.DATE = AA$ACTIVITY.EFF.DATE

    RETURN

PROCESS.INIT:
*************

    IF PRO.STATUS EQ "UNAUTH" AND COMM.PROP EQ "ANNUALCOMM" THEN
        GOSUB PROCESS.UNAUTH
    END
    RETURN

PROCESS.UNAUTH:
***************
* Check the commission type

    ARR.ID = ARRANGEMENT.ID
    CALL AA.GET.PROPERTY.RECORD('', ARRANGEMENT.ID, 'ANNUALCOMM', EFFECTIVE.DATE, 'CHARGE', '', CHARGE.RECORD, R.ERR)

    CALL AA.GET.PROPERTY.RECORD('', ARRANGEMENT.ID, 'COMMITMENT', EFFECTIVE.DATE, 'TERM.AMOUNT', '', TERM.RECORD, R.ERR)
    TOT.COMM.AMT = TERM.RECORD<AA.AMT.AMOUNT>

    CALL GET.LOC.REF('AA.ARR.CHARGE','MAX.ANNCOM.PER',MX.POS)
    MAX.PER = CHARGE.RECORD<AA.CHG.LOCAL.REF,MX.POS>

    CALL GET.LOC.REF('AA.ARR.CHARGE','MAX.ANNCOM.AMT',MA.POS)
    MAX.AMT = CHARGE.RECORD<AA.CHG.LOCAL.REF,MA.POS>

    IF NOT(MAX.AMT) AND MAX.PER THEN
        MAX.AMT = TOT.COMM.AMT * MAX.PER / 100
        R.NEW(AA.CHG.LOCAL.REF)<1,MA.POS> = MAX.AMT
    END

    CALL GET.LOC.REF('AA.ARR.CHARGE','ANNUAL.COMM',ST.POS)
    COMM.TYPE.ID = CHARGE.RECORD<AA.CHG.LOCAL.REF,ST.POS>

    IF COMM.TYPE.ID EQ '' THEN
        COMM.TYPE.ID = R.NEW(AA.CHG.LOCAL.REF)<1,ST.POS>
        CALL GET.LOC.REF('AA.ARR.CHARGE','ANNUALCOMM.PER',POS)
        RATE.ID = R.NEW(AA.CHG.LOCAL.REF)<1,POS> / 100

    END

    BEGIN CASE

    CASE COMM.TYPE.ID EQ '2'
        IF ACTIVITY.ID EQ 'LENDING-CALC-CHARGE' THEN
            GOSUB INPUT.FUR.PROCESS
        END
    CASE COMM.TYPE.ID EQ '4'
        IF ACTIVITY.ID EQ "LENDING-CALC-CHARGE" THEN
            GOSUB INPUT.FUR.PROCESS
        END
    CASE COMM.TYPE.ID EQ '1'
        GOSUB UPDATE.TOT.COMM
    CASE COMM.TYPE.ID EQ '5'
        GOSUB UPDATE.TOT.COMM
    CASE COMM.TYPE.ID EQ '3'
    END CASE

    RETURN

UPDATE.TOT.COMM:
****************
* Read Schedule Projetion to build the due amount for whole period

    IF NOT(ACTIVITY.ID EQ "LENDING-CALC-CHARGE") THEN
        CALL AA.GET.PROPERTY.RECORD('', ARRANGEMENT.ID, 'COMMITMENT', EFFECTIVE.DATE, 'TERM.AMOUNT', '', TERM.RECORD, R.ERR)
        TOT.COMM.AMT = TERM.RECORD<AA.AMT.AMOUNT>

        AMT.VAL = TOT.COMM.AMT * RATE.ID
        BEGIN CASE
        CASE COMM.TYPE.ID EQ "1"
            R.NEW(AA.CHG.FIXED.AMOUNT) = ''
            R.NEW(AA.CHG.CHARGE.TYPE)<1> = "CALCULATED"
            R.NEW(AA.CHG.TIER.GROUPS)<1> = "LEVELS"
            R.NEW(AA.CHG.CALC.TIER.TYPE)<1,1> = "LEVEL"
            R.NEW(AA.CHG.CALC.TYPE)<1,1> = "PERCENTAGE"
            R.NEW(AA.CHG.CHARGE.RATE)<1,1> = R.NEW(AA.CHG.LOCAL.REF)<1,POS>
        CASE 1
            R.NEW(AA.CHG.CHARGE.TYPE)<1> = 'FIXED'
            R.NEW(AA.CHG.TIER.GROUPS)<1> = ''
            R.NEW(AA.CHG.CALC.TIER.TYPE)<1,1> = ''
            R.NEW(AA.CHG.CALC.TYPE)<1,1> = ''
            R.NEW(AA.CHG.CHARGE.RATE)<1,1> = ''
            R.NEW(AA.CHG.FIXED.AMOUNT) = AMT.VAL
        END CASE
    END
    RETURN

INPUT.FUR.PROCESS:
**************


* Read Schedule Projetion to build the due amount for whole period
    CALL AA.GET.PROPERTY.RECORD('', ARRANGEMENT.ID, 'COMMITMENT', EFFECTIVE.DATE, 'TERM.AMOUNT', '', TERM.RECORD, R.ERR)
    MAT.DATE = TERM.RECORD<AA.AMT.MATURITY.DATE>

* Account details

    CALL GET.LOC.REF('AA.ARR.CHARGE','ANNUALCOMM.PER',POS)
    RATE.ID = R.NEW(AA.CHG.LOCAL.REF)<1,POS> / 100


    TEMP.DATE = EFFECTIVE.DATE
    CYCLE.DATE =''

*  CALL AA.SCHEDULE.PROJECTOR(ARR.ID, SIM.REF, "",CYCLE.DATE, TOT.PAYMENT, DUE.DATES, DUE.TYPES, DUE.METHODS, DUE.TYPE.AMTS, DUE.PROPS, DUE.PROP.AMTS, DUE.OUTS)
    SCHEDULE.INFO = ""
    SCHEDULE.INFO<1> = ARRANGEMENT.ID
    SCHEDULE.INFO<2> = TODAY
    SCHEDULE.INFO<3> = "REPAYMENT.SCHEDULE"
    SCHEDULE.INFO<8> = '1'
    RET.ERROR = ""
    SCHEDULE.INFO<2> = TODAY

    ADJUST.FINAL.AMOUNT = "1"

    DATE.RANGE =''
    SCHEDULE.INFO<7> = "1"

    CALL AA.BUILD.PAYMENT.SCHEDULE.SCHEDULES(SCHEDULE.INFO, REQD.END.DATE, NO.CYCLES, ADJUST.FINAL.AMOUNT, PAYMENT.DATES, PAYMENT.TYPES, PAYMENT.METHODS,PAYMENT.AMOUNTS, PAYMENT.PROPERTIES,  PAYMENT.PROPERTIES.AMT, TAX.DETAILS, OUTSTANDING.AMOUNT, RET.ERROR)
    ACC.CNT.CHECK = PAYMENT.PROPERTIES
    CONVERT @VM TO @FM IN ACC.CNT.CHECK
    CONVERT @SM TO @FM IN ACC.CNT.CHECK

    BEGIN CASE
    CASE COMM.TYPE.ID EQ "2"
        ACC.CNT = DCOUNT(ACC.CNT.CHECK,'ACCOUNT') - 1
    CASE COMM.TYPE.ID EQ "4"
        ACC.CNT = 1
    END CASE

    AMT.VAL = 0


    TT.DATE = LEFT(TEMP.DATE,4) + 1 : RIGHT(TEMP.DATE,4)
    TEMP.DATE = TT.DATE
    BEGIN CASE
    CASE MAT.DATE < TEMP.DATE
        CALC.ONE.YEAR = 1
        LAST.DATE = EFFECTIVE.DATE
    CASE MAT.DATE > TEMP.DATE
        CALC.FULL.YEAR = 1
    END CASE

    LOOP

    WHILE (MAT.DATE>TEMP.DATE)

        IF CALC.FULL.YEAR THEN
            AMT.VAL + = RATE.ID * TERM.RECORD<AA.AMT.AMOUNT>
            CALC.FULL.YEAR = 0
            LAST.DATE = TEMP.DATE
* One time check the value
        END
* First period will be take from the TERM.AMOUNT
        LOCATE TEMP.DATE IN PAYMENT.DATES BY "AL" SETTING BILL.POS THEN
        END
        TT.DATE = LEFT(TEMP.DATE,4) + 1 : RIGHT(TEMP.DATE,4)
        TEMP.DATE = TT.DATE
        IF MAT.DATE >= TEMP.DATE THEN
            AMT.VAL + = RATE.ID * OUTSTANDING.AMOUNT<BILL.POS - 1>
            LAST.DATE = TEMP.DATE
        END
    REPEAT

    IF MAT.DATE NE TEMP.DATE THEN
* Find commission till the round year so no need to skip the
* Calculate for remaining period
        NO.OF.DAYS = 'C'
        REGION = ''
        CALL CDD(REGION, LAST.DATE, MAT.DATE, NO.OF.DAYS)   ;* Get the Date difference
* Assumption 366/360 days in year, if required can we use for finding no of days BD.CALC.DAYS

        IF CALC.ONE.YEAR THEN
            AMT.VAL += ((NO.OF.DAYS)/360) * RATE.ID * TERM.RECORD<AA.AMT.AMOUNT>
        END ELSE
            AMT.VAL +=  ((NO.OF.DAYS)/360) * RATE.ID * OUTSTANDING.AMOUNT<BILL.POS - 1>
        END
    END


*    CALL GET.LOC.REF('AA.ARR.CHARGE','MAX.ANNCOM.AMT',POS)
*    MAX.AMT = CHARGE.RECORD<AA.CHG.LOCAL.REF,POS>

    IF MAX.AMT NE '' THEN
* Checking for the maximum tolerance level
        IF AMT.VAL LE MAX.AMT THEN
            R.NEW(AA.CHG.FIXED.AMOUNT) = AMT.VAL / ACC.CNT
        END ELSE
            R.NEW(AA.CHG.FIXED.AMOUNT) = MAX.AMT / ACC.CNT
        END
    END ELSE
        R.NEW(AA.CHG.FIXED.AMOUNT) = AMT.VAL / ACC.CNT
    END

    R.NEW(AA.CHG.CHARGE.TYPE)<1> = 'FIXED'
    R.NEW(AA.CHG.TIER.GROUPS)<1> = ''
    R.NEW(AA.CHG.CALC.TIER.TYPE)<1,1> = ''
    R.NEW(AA.CHG.CALC.TYPE)<1,1> = ''
    R.NEW(AA.CHG.CHARGE.RATE)<1,1> = ''

    RETURN
END
