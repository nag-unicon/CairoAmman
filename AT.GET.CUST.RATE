    SUBROUTINE AT.GET.CUST.RATE(AMT.IN,AMT.OUT)
    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE T24.BP I_F.FUNDS.TRANSFER
    $INCLUDE T24.BP I_F.CURRENCY
    $INCLUDE ATM.BP I_AT.ISO.COMMON

    YR.CCY.SELL = AT$INCOMING.ISO.REQ(49)
    YR.CCY.BUY = AT$INCOMING.ISO.REQ(51)
    CCY.SELL.ERR = ''
    CALL CACHE.READ("F.NUMERIC.CURRENCY",YR.CCY.SELL,R.CCY.SELL,CCY.SELL.ERR)
    CALL CACHE.READ("F.NUMERIC.CURRENCY",YR.CCY.BUY,R.CCY.BUY,CCY.BUY.ERR)
    YR.CCY.BUY = R.CCY.BUY<1>
    YR.CCY.SELL = R.CCY.SELL<1>
    YR.SELL.AMT = AT$INCOMING.ISO.REQ(4)
    CCY.ERR = ''
    CALL CACHE.READ("F.CURRENCY",YR.CCY.SELL,R.CURRENCY,CCR.ERR)

    YR.DECIMALS = R.CURRENCY<EB.CUR.NO.OF.DECIMALS>
    YR.SELL.AMT = YR.SELL.AMT/PWR(10,YR.DECIMALS)
    YR.CCY.MKT = "1"

    LOCATE YR.CCY.MKT IN R.CURRENCY<EB.CUR.CURRENCY.MARKET,1> SETTING CCY.POS THEN
        YR.TREASURY.RATE = R.CURRENCY<EB.CUR.SELL.RATE,CCY.POS>
    END
    YR.BUY.AMT = YR.SELL.AMT * YR.TREASURY.RATE
    RET.CODE = ''
    YR.CUSTOMER.SPREAD = YR.TREASURY.RATE * (0.5/100)
    YR.CUST.RATE = YR.CUSTOMER.SPREAD + YR.TREASURY.RATE
    AMT.OUT = YR.CUST.RATE
    IF YR.CCY.SELL EQ YR.CCY.BUY THEN
        AMT.OUT = ''
    END
    RETURN
