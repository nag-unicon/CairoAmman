    SUBROUTINE CAB.AGING.CUST.STATUS(ACCT.ID)
    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_F.ACCOUNT
    $INCLUDE I_F.CUSTOMER
    $INCLUDE BP I_F.CABK.CUSTOMER.AGINGSTATUS.DATE
    $INCLUDE BP I_F.CABK.CUSTOMER.AGING.CODE
    $INCLUDE CAB.BP I_CAB.AGING.CUST.STATUS.COMMON
    $INCLUDE I_F.AA.ACCOUNT.DETAILS
    $INCLUDE I_GTS.COMMON
    $INCLUDE BP I_F.CAB.FILE.PARAMETER
    ACC.CLASS = ''
    CALL F.READ(FN.ACCOUNT,ACCT.ID,R.ACCT,F.ACCOUNT,ACCT.ERR)
    Y.CUST = R.ACCT<AC.CUSTOMER>
    GOSUB GET.CUST.DETS
    IF R.ACCT<AC.OVERDUE.STATUS> THEN
        AA.ID = R.ACCT<AC.ARRANGEMENT.ID>
        CALL F.READ(FN.AA.ACCOUNT.DETAILS,AA.ID,R.AA.ACCT.DETS,F.AA.ACCOUNT.DETAILS,ACCT.DET.ERR)
        L.AGE.STATUS =  R.AA.ACCT.DETS<AA.AD.ARR.AGE.STATUS>
        Y.CUS.AGE = L.AGE.STATUS
        GOSUB READ.CUST.AGE.CODE
    END ELSE
        A.STATUS =  R.ACCT<AC.LOCAL.REF,A.POS>
        Y.CUS.AGE = A.STATUS
        GOSUB READ.CUST.AGE.CODE
        IF Y.LCY.AMNT THEN
            ACCT.CUR = R.ACCT<AC.CURRENCY>
            ACCT.BAL = R.ACCT<AC.ONLINE.ACTUAL.BAL>
            GOSUB GET.ACCT.AMNT
            IF (ABS(EQU.AMT) LT Y.LCY.AMNT ) OR (EQU.AMT GT 0 ) THEN
                RETURN
            END
        END
    END
    IF N.CUS.STATUS THEN
        GOSUB UPDATE.CUST.AGING.STATUS
    END
    RETURN

******************
GET.CUST.DETS:
*****************
    CURR.CUS.STATUS = ''; CUS.STATUS= '';
    CALL F.READ(FN.CUSTOMER,Y.CUST,CUST.REC,F.CUSTOMER,CUST.ERR)
    CUS.STATUS = CUST.REC<EB.CUS.CUSTOMER.STATUS>
    CURR.CUS.STATUS = CUS.STATUS
    L.ORG.STATUS = CUST.REC<EB.CUS.LOCAL.REF,STAT.POS>
    IF L.ORG.STATUS THEN
        CUS.STATUS = L.ORG.STATUS
    END
    RETURN

********************
READ.CUST.AGE.CODE:
********************

    S.POS = '' ; N.CUS.STATUS = '' ; Y.LCY.AMNT= ''
    CALL F.READ(FN.CABK.CUSTOMER.AGING.CODE,Y.CUS.AGE,CUST.AGE.REC,F.CABK.CUSTOMER.AGING.CODE,CUST.AGE.ERR)
    IF CUST.AGE.REC THEN
        LOCATE CUS.STATUS IN CUST.AGE.REC<CABK.CUSAGE.ORIG.STATUS,1> SETTING S.POS THEN
            N.CUS.STATUS = CUST.AGE.REC<CABK.CUSAGE.AGING.STATUS,S.POS>
        END ELSE
            NO.OF.RANGES = DCOUNT(CUST.AGE.REC<CABK.CUSAGE.ORIG.STATUS.RNG>,VM)
            FOR K = 1 TO NO.OF.RANGES
                FROM.RANGE = FIELD(CUST.AGE.REC<CABK.CUSAGE.ORIG.STATUS.RNG,K>,'-',1)
                TO.RANGE = FIELD(CUST.AGE.REC<CABK.CUSAGE.ORIG.STATUS.RNG,K>,'-',2)
                IF CUS.STATUS GE FROM.RANGE AND CUS.STATUS LE TO.RANGE THEN
                    N.CUS.STATUS = CUST.AGE.REC<CABK.CUSAGE.AGING.STATUS.RNG,K>
                    BREAK
                END
            NEXT
        END
        Y.RANK = CUST.AGE.REC<CABK.CUSAGE.AGING.RANK>
        Y.LCY.AMNT = CUST.AGE.REC<CABK.CUSAGE.AGING.LCY.AMNT>
    END

    RETURN

***************
GET.ACCT.AMNT:
****************
    EQU.AMT = ''
    CCY.MKT = '1'
    BASE.CCY = ''
    EXCHANGE.RATE = ''
    DIFFERENCE = ''
    CALL EXCHRATE(CCY.MKT,ACCT.CUR,ACCT.BAL,LCCY,EQU.AMT,BASE.CCY,EXCHANGE.RATE,DIFFERENCE,Y.LCY.AMT,RETURN.CODE)
    RETURN
**************************
UPDATE.CUST.AGING.STATUS:
**************************

    CALL F.READ(FN.CABK.CUSTOMER.AGINGSTATUS.DATE,Y.CUST,R.CUST.AGESTAT,F.CABK.CUSTOMER.AGINGSTATUS.DATE,CUST.AGESTST.ERR)
    IF R.CUST.AGESTAT THEN
        IF ACCT.ID MATCHES R.CUST.AGESTAT<CABK.AGSTAT.AGING.ACCTS> ELSE
            NO.OF.ACCTS = DCOUNT(R.CUST.AGESTAT<CABK.AGSTAT.AGING.ACCTS>,VM)
            R.CUST.AGESTAT<CABK.AGSTAT.AGING.ACCTS,NO.OF.ACCTS+1> = ACCT.ID
        END
        IF Y.RANK GT R.CUST.AGESTAT<CABK.AGSTAT.AGING.RANK> THEN
            GOSUB WRITE.LOG
        END
    END ELSE
        R.CUST.AGESTAT<CABK.AGSTAT.ORIG.STATUS>   = CUS.STATUS
        R.CUST.AGESTAT<CABK.AGSTAT.AGING.ACCTS,1> = ACCT.ID
        GOSUB WRITE.LOG
    END
    RETURN
**********
WRITE.LOG:
**********
    R.CUST.AGESTAT<CABK.AGSTAT.DATE> = TODAY
    R.CUST.AGESTAT<CABK.AGSTAT.AGING.STATUS> = N.CUS.STATUS
    R.CUST.AGESTAT<CABK.AGSTAT.AGING.RANK> = Y.RANK
    CALL F.WRITE(FN.CABK.CUSTOMER.AGINGSTATUS.DATE,Y.CUST,R.CUST.AGESTAT)
    CALL JOURNAL.UPDATE("")
    RETURN
