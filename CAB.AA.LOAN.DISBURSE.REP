    SUBROUTINE CAB.AA.LOAN.DISBURSE.REP
* ----------------------------------------------------------------------------------------------
* Company Name     : Cairo Amman Bank
* Developed By     : Muthukaruppan
* Development Id   : Disbursement Report
* Date             : 15th May 2017
*----------------------------------------------------------------------------------------------
* Subroutine Type  : Batch Routine
* Attached to      : BATCH>BNK/CAB.AA.LOAN.DISBURSE.REP
*
* Attached As      : Batch Routine
* ----------------------------------------------------------------------------------------------
* Primary Purpose  : This routine is used to display the disbursed loans.
*                  :

* ----------------------------------------------------------------------------------------------
* ARGS -(Input)    :
* ARGS -(Output)   :
* ----------------------------------------------------------------------------------------------
* Modification History:
* ---------------------
* Modification Ref :
* Modification Date:
* Modified by      :
* Modifi. Descript :
*----------------------------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.DATES
    $INSERT I_F.AA.ACCOUNT.DETAILS
    $INSERT I_F.AA.ACCOUNT
    $INSERT I_F.AA.ARRANGEMENT
    $INSERT I_F.AA.BILL.DETAILS
    $INSERT I_F.AA.TERM.AMOUNT
    $INSERT I_BATCH.FILES
    $INSERT I_F.CUSTOMER
    $INSERT TT.BP I_F.CAB.AAA.LOG.DETAILS
    $INSERT TT.BP I_F.CAB.AA.REPORT.DATES
    $INSERT TT.BP I_F.CAB.PATH.PARAMETER

    GOSUB OPEN.FILES
    GOSUB GET.PARAMETER.RECORDS
    GOSUB GET.REPORT.PATH
    GOSUB PROCESS.SELECT.STATEMENT
    GOSUB PROCESS.GENERATE.ACTION

    RETURN

OPEN.FILES:

    FN.CAB.AAA.LOG.DETAILS = "F.CAB.AAA.LOG.DETAILS"
    F.CAB.AAA.LOG.DETAILS = ""
    CALL OPF(FN.CAB.AAA.LOG.DETAILS, F.CAB.AAA.LOG.DETAILS)

    FN.AA.ACCOUNT.DETAILS = "F.AA.ACCOUNT.DETAILS"
    F.AA.ACCOUNT.DETAILS = ""
    CALL OPF(FN.AA.ACCOUNT.DETAILS, F.AA.ACCOUNT.DETAILS)

    FN.CAB.AA.REPORT.DATES = "F.CAB.AA.REPORT.DATES" :FM: "NO.FATAL.ERROR"
    F.CAB.AA.REPORT.DATES = ""
    CALL OPF(FN.CAB.AA.REPORT.DATES, F.CAB.AA.REPORT.DATES)

    FN.CAB.PATH.PARAMETER = "F.CAB.PATH.PARAMETER" :FM: "NO.FATAL.ERROR"
    F.CAB.PATH.PARAMETER = ""
    CALL OPF(FN.CAB.PATH.PARAMETER, F.CAB.PATH.PARAMETER)

    FN.AA.DISBURSE.REASON = "F.AA.DISBURSE.REASON" :FM: "NO.FATAL.ERROR"
    F.AA.DISBURSE.REASON = ""
    CALL OPF(FN.AA.DISBURSE.REASON, F.AA.DISBURSE.REASON)

    FN.AA.ARRANGEMENT = "F.AA.ARRANGEMENT"
    F.AA.ARRANGEMENT = ""
    CALL OPF(FN.AA.ARRANGEMENT, F.AA.ARRANGEMENT)

    FN.AA.BILL.DETAILS = "F.AA.BILL.DETAILS"
    F.AA.BILL.DETAILS = ""
    CALL OPF(FN.AA.BILL.DETAILS, F.AA.BILL.DETAILS)

    FN.CUSTOMER = "F.CUSTOMER"
    F.CUSTOMER = ""
    CALL OPF(FN.CUSTOMER, F.CUSTOMER)

    APPL = "AA.PRD.DES.TERM.AMOUNT"
    APPL.FLD = 'DISBURSE.REASON'
    APPL.POS = ""
    CALL MULTI.GET.LOC.REF(APPL,APPL.FLD,APPL.POS)
    DISBURSEMENT.CODE.POS = APPL.POS<1,1>

    RETURN


*** </region>
*** <region name= Get Parameter Records>

GET.PARAMETER.RECORDS:

    R.CAB.PATH.PARAMETER = ""
    ERR.CAB.PATH.PARAMETER = ""
    CALL F.READ(FN.CAB.PATH.PARAMETER, "SYSTEM", R.CAB.PATH.PARAMETER, F.CAB.PATH.PARAMETER, ERR.CAB.PATH.PARAMETER)

    R.CAB.AA.REPORT.DATES = ""
    ERR.CAB.AA.REPORT.DATES = ""
    CALL F.READ(FN.CAB.AA.REPORT.DATES,'SYSTEM',R.CAB.AA.REPORT.DATES,F.CAB.AA.REPORT.DATES,ERR.CAB.AA.REPORT.DATES)

*    IF R.CAB.AA.REPORT.DATES THEN ; * For future use
*        START.DATE = R.CAB.AA.REPORT.DATES<CAB.START.DATE>
*        END.DATE   = R.CAB.AA.REPORT.DATES<CAB.END.DATE>
*    END ELSE
    START.DATE = TODAY
    END.DATE   = TODAY
*    END

    RETURN

*** </region>
*** <region name= Read Path Parameter file to get the expected outdirectory>

GET.REPORT.PATH:

    BATCH.NAME = BATCH.INFO<1>

    LOCATE BATCH.NAME IN R.CAB.PATH.PARAMETER<CAB.PATH.PARAMETER.SERVICE.NAME,1> SETTING SERVICE.NAME.POS THEN
        OUT.DIRECTORY = R.CAB.PATH.PARAMETER<CAB.PATH.PARAMETER.DIRECTORY.PATH,SERVICE.NAME.POS>
        OUT.FILENAME  = R.CAB.PATH.PARAMETER<CAB.PATH.PARAMETER.FILE.NAME,SERVICE.NAME.POS>
    END ELSE
        OUT.DIRECTORY = R.CAB.PATH.PARAMETER<CAB.PATH.PARAMETER.COMMON.PATH>
        IF NOT(OUT.DIRECTORY) THEN
            OUT.DIRECTORY = "&SAVEDLISTS&"
        END
    END

    IF OUT.FILENAME THEN
        OUT.FILENAME = OUT.FILENAME : "_":TODAY:".csv"
        INCREASE.COMMITMENT.FILE = OUT.FILENAME : "_IncreasedAmt_":TODAY:".csv"
    END ELSE
        OUT.FILENAME =  "Disbursement_":TODAY: ".csv"
        INCREASE.COMMITMENT.FILE =  "Increased_Disbursement_" :TODAY: ".csv"
    END

    F.OUT.PATH = ''
    F.OUT.PATH.ONE = ''

    IF OUT.DIRECTORY AND OUT.FILENAME THEN
        OPENSEQ OUT.DIRECTORY,OUT.FILENAME TO F.OUT.PATH ELSE NULL
        OPENSEQ OUT.DIRECTORY,INCREASE.COMMITMENT.FILE TO F.OUT.PATH.ONE ELSE NULL
    END

    RETURN

PROCESS.SELECT.STATEMENT:

    SEL.CMD = "SELECT ":FN.CAB.AAA.LOG.DETAILS: " WITH ACTIVITY EQ LENDING-DISBURSE-COMMITMENT AND EFF.DATE GE " :START.DATE : " AND EFF.DATE LE ":END.DATE
    CALL EB.READLIST(SEL.CMD, KEY.LIST, LIST.NAME, SELECTED, RETURN.CODE)

    RETURN

PROCESS.GENERATE.ACTION:

    OUT.ARRAY  = "Report Date"  :",": "Customer" :",": "Arrangement" :",": "Account" :",": "Disbursement Date" :",": "Currency" :",": "Disbursement Amount" :",":
    OUT.ARRAY := "Activity Charge Amount"  :",": "Category"  :",": "Product Name" :",": "Disbursement Reason" :",": "Customer Status"

    GOSUB DO.WRITE.INCREASED.AMT

    OUT.ARRAY := ",": "Total Commitment"  :",": "Total Principal"
    GOSUB DO.WRITE.DISBURSED.AMT

    LoanCount = DCOUNT(KEY.LIST, FM)
    LoopCount = 1

    LOOP
    WHILE LoopCount LE LoanCount
        ACTIVITY.ID = KEY.LIST<LoopCount>

        CALL F.READ(FN.CAB.AAA.LOG.DETAILS, ACTIVITY.ID, R.CAB.AAA.LOG.DETAILS, F.CAB.AAA.LOG.DETAILS, ERR.CAB.AAA.LOG.DETAILS)

        IF R.CAB.AAA.LOG.DETAILS<AAA.STATUS> EQ "AUTH" THEN
            ARR.ID = R.CAB.AAA.LOG.DETAILS<AAA.ARRANGEMENT.ID>

            GOSUB GET.ACCOUNT.NUMBER

            R.AA.ACCOUNT.DETAILS = ""
            ERR.AA.ACCOUNT.DETAILS = ""
            CALL F.READ(FN.AA.ACCOUNT.DETAILS, ARR.ID, R.AA.ACCOUNT.DETAILS, F.AA.ACCOUNT.DETAILS, ERR.AA.ACCOUNT.DETAILS)

            WRITE.FILE.NAME = ""

            GOSUB GET.ACCOUNT.CATEGORY
            GOSUB GET.DISBURSEMENT.REASON
            GOSUB GET.COMMITMENT.AMOUNT
            GOSUB GET.PRINCIPAL.AMOUNT
            GOSUB GET.CAPITALISE.ACT.CHARGE.BILL.AMT

            CUSTOMER       = R.CAB.AAA.LOG.DETAILS<AAA.CUSTOMER>
            EFFECTIVE.DATE = R.CAB.AAA.LOG.DETAILS<AAA.EFF.DATE>
            CURRENCY       = R.CAB.AAA.LOG.DETAILS<AAA.CURRENCY>
            TXN.AMOUNT     = R.CAB.AAA.LOG.DETAILS<AAA.TRANS.AMT>
            PRODUCT.NAME   = R.CAB.AAA.LOG.DETAILS<AAA.PRODUCT>
            CATEGORY.CODE  = R.AA.ACCOUNT<AA.AC.CATEGORY>

            GOSUB GET.CUSTOMER.STATUS

            OUT.ARRAY  = TODAY :",": CUSTOMER :",": ARR.ID :",": ACCT.ID :",": EFFECTIVE.DATE :",": CURRENCY :",": TXN.AMOUNT :",": ACTIVITY.CHARGE.AMOUNT :","
            OUT.ARRAY := CATEGORY.CODE :",": PRODUCT.NAME :",": DISBURSEMENT.REASON :",": CUSTOMER.STATUS

            IF R.AA.ACCOUNT.DETAILS<AA.AD.START.DATE> LT R.CAB.AAA.LOG.DETAILS<AAA.EFF.DATE> THEN
                GOSUB DO.WRITE.INCREASED.AMT
            END ELSE
                OUT.ARRAY := ",": TOT.COMMITMENT :",": CURRENT.ACCOUNT.BALANCE
                GOSUB DO.WRITE.DISBURSED.AMT
            END

        END

        LoopCount + = 1
    REPEAT

    RETURN

GET.ACCOUNT.NUMBER:

    R.AA.ARRANGEMENT = ""
    ERR.AA.ARRANGEMENT = ""
    CALL F.READ(FN.AA.ARRANGEMENT, ARR.ID, R.AA.ARRANGEMENT, F.AA.ARRANGEMENT, ERR.AA.ARRANGEMENT)
    ACCT.ID = R.AA.ARRANGEMENT<AA.ARR.LINKED.APPL.ID,1>

    RETURN

GET.ACCOUNT.CATEGORY:

    idPropertyClass = "ACCOUNT"
    idProperty      = ""
    GOSUB GET.ARRANGEMENT.CONDITION

    R.AA.ACCOUNT = RAISE(R.AA.CONDITIONS)

    RETURN

GET.DISBURSEMENT.REASON:

    idPropertyClass = "TERM.AMOUNT"
    idProperty      = ""
    GOSUB GET.ARRANGEMENT.CONDITION
    R.AA.TERM.AMOUNT = RAISE(R.AA.CONDITIONS)
    DISBURSEMENT.CODE = R.AA.TERM.AMOUNT<AA.AMT.LOCAL.REF, DISBURSEMENT.CODE.POS>

    R.AA.DISBURSE.REASON = ""
    ERR.AA.DISBURSE.REASON = ""
    CALL F.READ(FN.AA.DISBURSE.REASON, DISBURSEMENT.CODE, R.AA.DISBURSE.REASON, F.AA.DISBURSE.REASON, ERR.AA.DISBURSE.REASON)
    DISBURSEMENT.REASON = R.AA.DISBURSE.REASON<1>

    RETURN

GET.COMMITMENT.AMOUNT:

    BALANCE.TYPE = "TOTCOMMITMENT"
    GOSUB GET.BALANCE.AMOUNT
    TOT.COMMITMENT = ECB.BALANCE

    RETURN

GET.PRINCIPAL.AMOUNT:

    BALANCE.TYPE = "CURACCOUNT"
    GOSUB GET.BALANCE.AMOUNT
    CURRENT.ACCOUNT.BALANCE = ECB.BALANCE

    RETURN

GET.BALANCE.AMOUNT:

    ECB.BALANCE = ""
    CALL AC.GET.ECB.BALANCE(ACCT.ID, BALANCE.TYPE, SUB.TYPE, EFFECTIVE.DATE, ECB.BALANCE, ECB.BAL.LCY)
    ECB.BALANCE = ABS(ECB.BALANCE)

    RETURN

GET.ARRANGEMENT.CONDITION:

    effectiveDate   = TODAY
    returnIds       = ""
    R.AA.CONDITIONS = ""
    returnError     = ""
    CALL AA.GET.ARRANGEMENT.CONDITIONS(ARR.ID, idPropertyClass, idProperty, effectiveDate, returnIds, R.AA.CONDITIONS, returnError)

    RETURN

GET.CAPITALISE.ACT.CHARGE.BILL.AMT:

    PROCESS.TYPE = "INITIALISE"
    UPDATE.TYPE = ""
    UPDATE.INFO = ""
    RET.ERROR = ""
    CALL AA.PROCESS.ACCOUNT.DETAILS(ARR.ID, PROCESS.TYPE, UPDATE.TYPE, UPDATE.INFO, RET.ERROR)

    BILL.DATE = EFFECTIVE.DATE
    PAYMENT.METHOD = "CAPITALISE"
    BILL.SETTLE.STATUS = "SETTLED"
    CALL AA.GET.BILL(ARR.ID, "", PAYMENT.DATE, BILL.DATE, BILL.TYPE, PAYMENT.METHOD, BILL.STATUS, BILL.SETTLE.STATUS, BILL.AGE.STATUS, BILL.NEXT.AGE.DATE, REPAYMENT.REFERENCE, BILL.REFERENCES, RET.ERROR)

    TOTAL.BILL.CNT  = DCOUNT(BILL.REFERENCES, VM)
    ACTIVITY.CHARGE.AMOUNT = 0

    BILL.COUNT = 1
    LOOP
    WHILE BILL.COUNT LE TOTAL.BILL.CNT

        BILL.ID = BILL.REFERENCES<1,BILL.COUNT>

        R.AA.BILL.DETAILS = ""
        ERR.AA.BILL.DETAILS = ""
        CALL F.READ(FN.AA.BILL.DETAILS, BILL.ID, R.AA.BILL.DETAILS, F.AA.BILL.DETAILS, ERR.AA.BILL.DETAILS)

        ACTIVITY.CHARGE.AMOUNT + = R.AA.BILL.DETAILS<AA.BD.OR.TOTAL.AMOUNT>

        BILL.COUNT + = 1
    REPEAT

    RETURN

GET.CUSTOMER.STATUS:

    R.CUSTOMER = ""
    ERR.CUSTOMER = ""
    CALL F.READ(FN.CUSTOMER, CUSTOMER, R.CUSTOMER,F.CUSTOMER, ERR.CUSTOMER)
    CUSTOMER.STATUS = R.CUSTOMER<EB.CUS.CUSTOMER.STATUS>

    RETURN

DO.WRITE.INCREASED.AMT:

    WRITESEQ OUT.ARRAY APPEND TO F.OUT.PATH.ONE ELSE
        WRITELIST OUT.ARRAY TO OUT.FILENAME
    END

    RETURN

DO.WRITE.DISBURSED.AMT:

    WRITESEQ OUT.ARRAY APPEND TO F.OUT.PATH ELSE
        WRITELIST OUT.ARRAY TO OUT.FILENAME
    END

    RETURN
END
