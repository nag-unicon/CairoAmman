    SUBROUTINE ATM.RECON.CORR.M


    $INCLUDE T24.BP I_COMMON
    $INCLUDE T24.BP I_EQUATE
    $INCLUDE CAB.BP I_ATM.RECON.SERVICE.REGENERATE.COMMON
    $INCLUDE CAB.BP I_F.ATM.RECON.MAPPING
    $INCLUDE T24.BP I_F.STANDARD.SELECTION
    $INCLUDE T24.BP I_BATCH.FILES
    $INCLUDE T24.BP I_F.STMT.ENTRY
    $INCLUDE T24.BP I_F.ACCOUNT
    $INCLUDE T24.BP I_F.DATES
    $INCLUDE T24.BP I_F.FUNDS.TRANSFER
    $INCLUDE T24.BP I_F.STMT.ENTRY
    $INCLUDE T24.BP I_F.CURRENCY
    $INCLUDE T24.BP I_F.ACCT.ACTIVITY
    $INCLUDE T24.BP I_F.ACCOUNT.STATEMENT
    $INCLUDE CAB.BP I_F.ATM.RECON.PARAMETER

    FINAL.FT.RECORD = ''
    FINAL.FT.RECORD.FINAL = ''
    TEMP.R.FT.REC.NEW.UPD = ''
    TRUE = 1
    FALSE = 0
    REC.ID = "JOD1711400841012"
    CONTROL.LIST<1,1> = "VISA"
    GOSUB INIT.NEW
    GOSUB STMT.PROCESS

    RETURN

*********
INIT.NEW:
*********

    F.ATM.RECON.MAPPING = ''
    FN.ATM.RECON.PARAMETER = ''
    F.ATM.RECON.PARAMETER = ''
    FN.STMT.ENTRY = ''
    F.STMT.ENTRY = ''
    FN.STMT.ENTRY.DETAIL = ''
    F.STMT.ENTRY.DETAIL = ''
    FN.STMT.ENTRY.DETAIL.XREF = ''
    F.STMT.ENTRY.DETAIL.XREF = ''
    FN.ACCT.ENT.LWORK.DAY = ''
    F.ACCT.ENT.LWORK.DAY = ''
    FN.ACCT.ENT.FWD = ''
    F.ACCT.ENT.FWD = ''
    FN.FUNDS.TRANSFER = ''
    F.FUNDS.TRANSFER = ''
    FN.FUNDS.TRANSFER$HIS = ''
    F.FUNDS.TRANSFER$HIS = ''
    FN.ACCOUNT = ''
    F.ACCOUNT = ''
    FN.STANDARD.SELECTION = ''
    FN.AC.SUB.ACCOUNT = ''
    F.AC.SUB.ACCOUNT = ''
    FN.ACCT.ENT.TODAY = ''
    F.ACCT.ENT.TODAY = ''
    R.ATM.RECON.PARAMETER = ''
    R.ATM.RECON.ACCOUNT = ''
    R.ATM.RECON.MAPPING = ''
    R.ATM.RECON.MAPPING.VISA = ''
    R.ATM.RECON.MAPPING.ATM = ''
    R.ATM.RECON.MAPPING.INCO = ''
    R.ATM.RECON.MAPPING.POS = ''
    R.ATM.RECON.MAPPING.OCW = ''
    R.ATM.RECON.MAPPING.COEX = ''
    R.ATM.RECON.ACCOUNT.VISA = ''
    R.ATM.RECON.ACCOUNT.POS = ''
    R.ATM.RECON.ACCOUNT.ATM = ''
    R.ATM.RECON.ACCOUNT.INCO = ''
    R.ATM.RECON.ACCOUNT.OCW = ''
    R.ATM.RECON.ACCOUNT.COEX = ''
    REC.STORE = ''
    RECON.FOLDER = ''
    RECON.PATH = ''
    RECON.VISA.PATH = ''
    RECON.ATM.PATH = ''
    RECON.POS.PATH = ''
    RECON.INCO.PATH = ''
    RECON.OCW.PATH = ''
    RECON.COEX.PATH = ''
    RECON.TEMP.PATH = ''
    RECON.DIR = ''
    RECON.VISA.DIR = ''
    RECON.ATM.DIR = ''
    RECON.POS.DIR = ''
    RECON.INCO.DIR = ''
    RECON.OCW.DIR = ''
    RECON.COEX.DIR = ''
    R.STMT.ENTRY = ''
    REC.TYPE = ''
    CBSTXNREF.POS = ''
    FN.ACCT.ACT = ''
    F.ACCT.ACT = ''
    UNIQ.ID.POS = ''
    MERCHANT.POS = ''
    FN.CARD.ISSUE.ACCT = ''
    F.CARD.ISSUE.ACCT = ''
    FN.ATM.RERVERSAL = ''
    F.ATM.REVERSAL = ''
    FN.CCY = ''
    F.CCY = ''
    CCY.DECIMAL = ''
    FN.TXN = ''
    F.TXN = ''
    BAL.AFT.TXN.POS = ''
    F.STMT.PRINTED = ''
    FN.STMT.PRINTED = ''
    FN.ACCT.STMT = ''
    F.ACCT.STMT = ''
    FN.ACCT.STMT.PRINT = ''
    F.ACCT.STMT.PRINT = ''
    FN.STMT.PRINTED = ''
    F.STMT.PRINTED = ''
    YR.REQ.DATE = ''
    YR.LAST.WORK.DAY = ''
    AT.AUTH.CODE.POS = ''
    FN.ATM.RECON.MAPPING = ''
    F.ATM.RECON.MAPPING=''
    FN.ATM.RECON.PARAMETER = ''
    F.ATM.RECON.PARAMETER = ''
    FN.STMT.ENTRY = ''
    F.STMT.ENTRY = ''
    FN.STMT.ENTRY.DETAIL = ''
    F.STMT.ENTRY.DETAIL = ''
    FN.STMT.ENTRY.DETAIL.XREF = ''
    F.STMT.ENTRY.DETAIL.XREF = ''
    FN.ACCT.ENT.LWORK.DAY = ''
    F.ACCT.ENT.LWORK.DAY = ''
    FN.FUNDS.TRANSFER = ''
    F.FUNDS.TRANSFER = ''
    FN.FUNDS.TRANSFER$HIS = ''
    F.FUNDS.TRANSFER$HIS = ''
    FN.AC.SUB.ACCOUNT = ''
    F.AC.SUB.ACCOUNT = ''
    FN.ACCT.ENT.TODAY = ''
    F.ACCT.ENT.TODAY = ''
    FN.ACCOUNT = ''
    F.ACCOUNT = ''
    FN.STANDARD.SELECTION = ''
    REC.STORE = ''
    R.ATM.RECON.MAPPING = ''
    R.ATM.RECON.MAPPING.VISA = ''
    R.ATM.RECON.MAPPING.ATM = ''
    R.ATM.RECON.MAPPING.POS = ''
    R.ATM.RECON.MAPPING.INCO = ''
    R.ATM.RECON.MAPPING.OCW = ''
    R.ATM.RECON.PARAMETER =''

    FN.ATM.RECON.ACCOUNT = 'F.ATM.RECON.ACCOUNT'

    FN.ATM.RECON.MAPPING = 'F.ATM.RECON.MAPPING'
    F.ATM.RECON.MAPPING = ''
    CALL OPF(FN.ATM.RECON.MAPPING,F.ATM.RECON.MAPPING)

    FN.ATM.RECON.PARAMETER = 'F.ATM.RECON.PARAMETER'
    F.ATM.RECON.PARAMETER = ''
    CALL OPF(FN.ATM.RECON.PARAMETER,F.ATM.RECON.PARAMETER)

    FN.STMT.ENTRY = 'F.STMT.ENTRY'
    F.STMT.ENTRY = ''
    CALL OPF(FN.STMT.ENTRY,F.STMT.ENTRY)

    FN.STMT.ENTRY.DETAIL = 'F.STMT.ENTRY.DETAIL'
    F.STMT.ENTRY.DETAIL = ''
    CALL OPF(FN.STMT.ENTRY.DETAIL,F.STMT.ENTRY.DETAIL)

    FN.STMT.ENTRY.DETAIL.XREF = 'F.STMT.ENTRY.DETAIL.XREF'
    F.STMT.ENTRY.DETAIL.XREF = ''
    CALL OPF(FN.STMT.ENTRY.DETAIL.XREF,F.STMT.ENTRY.DETAIL.XREF)

    FN.ACCT.ACT = 'F.ACCT.ACTIVITY'
    F.ACCT.ACT = ''
    CALL OPF(FN.ACCT.ACT,F.ACCT.ACT)

    FN.ACCT.ENT.LWORK.DAY = 'F.ACCT.ENT.LWORK.DAY'
    F.ACCT.ENT.LWORK.DAY = ''
    CALL OPF(FN.ACCT.ENT.LWORK.DAY,F.ACCT.ENT.LWORK.DAY)

    FN.FUNDS.TRANSFER = 'F.FUNDS.TRANSFER'
    F.FUNDS.TRANSFER = ''
    CALL OPF(FN.FUNDS.TRANSFER,F.FUNDS.TRANSFER)

    FN.FUNDS.TRANSFER$HIS = 'F.FUNDS.TRANSFER$HIS'
    F.FUNDS.TRANSFER$HIS = ''
    CALL OPF(FN.FUNDS.TRANSFER$HIS, F.FUNDS.TRANSFER$HIS)

    FN.ACCT.ENT.TODAY = 'F.ACCT.ENT.TODAY'
    F.ACCT.ENT.TODAY = ''
    CALL OPF(FN.ACCT.ENT.TODAY,F.ACCT.ENT.TODAY)

    FN.ACCT.ENT.FWD = 'F.ACCT.ENT.FWD'
    F.ACCT.ENT.FWD = ''
    CALL OPF(FN.ACCT.ENT.FWD,F.ACCT.ENT.FWD)

    FN.AC.SUB.ACCOUNT = 'F.AC.SUB.ACCOUNT'
    F.AC.SUB.ACCOUNT = ''
    CALL OPF(FN.AC.SUB.ACCOUNT,F.AC.SUB.ACCOUNT)

    FN.ACCOUNT = 'F.ACCOUNT'
    F.ACCOUNT = ''
    CALL OPF(FN.ACCOUNT,F.ACCOUNT)

    FN.CARD.ISSUE.ACCT = 'F.CARD.ISSUE.ACCOUNT'
    F.CARD.ISSUE.ACCT = ''
    CALL OPF(FN.CARD.ISSUE.ACCT,F.CARD.ISSUE.ACCT)

    FN.ATM.RERVERSAL = 'F.ATM.REVERSAL'
    F.ATM.REVERSAL = ''
    CALL OPF(FN.ATM.RERVERSAL,F.ATM.REVERSAL)

    FN.TXN = 'F.TRANSACTION'
    F.TXN = ''
    CALL OPF(FN.TXN,F.TXN)

    FN.ACCT.STMT.PRINT = 'F.ACCT.STMT.PRINT'
    F.ACCT.STMT.PRINT = ''
    CALL OPF(FN.ACCT.STMT.PRINT,F.ACCT.STMT.PRINT)

    FN.ACCT.STMT = 'F.ACCOUNT.STATEMENT'
    F.ACCT.STMT = ''
    CALL OPF(FN.ACCT.STMT,F.ACCT.STMT)

    FN.CCY = 'F.CURRENCY'
    F.CCY = ''
    CALL OPF(FN.CCY,F.CCY)

    FN.STMT.PRINTED = 'F.STMT.PRINTED'
    F.STMT.PRINTED = ''
    CALL OPF(FN.STMT.PRINTED,F.STMT.PRINTED)
* CAB20140211 -S

    LOCAL.APPLICATION = 'ACCOUNT'
    LOCAL.FIELD = 'BAL.AFT.TXN'
    LOCAL.POS = ''
    CALL MULTI.GET.LOC.REF(LOCAL.APPLICATION,LOCAL.FIELD,LOCAL.POS)
    BAL.AFT.TXN.POS = LOCAL.POS<1,1>

    FN.STANDARD.SELECTION = 'F.STANDARD.SELECTION'
    CALL CACHE.READ(FN.STANDARD.SELECTION,'STMT.ENTRY',REC.STORE,SS.ERR)
* CAB20140211 -E

    CALL CACHE.READ(FN.ATM.RECON.PARAMETER,'SYSTEM',R.ATM.RECON.PARAMETER,ATM.RECON.ERR)


    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'VISA',R.ATM.RECON.MAPPING.VISA,ATM.REC.MAP.ERR)
    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'ATM',R.ATM.RECON.MAPPING.ATM,ATM.REC.MAP.ERR)
    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'POS',R.ATM.RECON.MAPPING.POS,ATM.REC.MAP.ERR)
    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'INCO',R.ATM.RECON.MAPPING.INCO,ATM.REC.MAP.ERR)
    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'OCW',R.ATM.RECON.MAPPING.OCW,ATM.REC.MAP.ERR)
    CALL CACHE.READ(FN.ATM.RECON.MAPPING,'COEX',R.ATM.RECON.MAPPING.COEX,ATM.REC.MAP.ERR)

    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'VISA',R.ATM.RECON.ACCOUNT.VISA,ATM.ACC.ERR)
    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'ATM',R.ATM.RECON.ACCOUNT.ATM,ATM.ACC.ERR)
    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'POS',R.ATM.RECON.ACCOUNT.POS,ATM.ACC.ERR)
    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'INCO',R.ATM.RECON.ACCOUNT.INCO,ATM.ACC.ERR)
    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'OCW',R.ATM.RECON.ACCOUNT.OCW,ATM.ACC.ERR)
    CALL CACHE.READ(FN.ATM.RECON.ACCOUNT,'COEX',R.ATM.RECON.ACCOUNT.COEX,ATM.ACC.ERR)

    APPL = 'FUNDS.TRANSFER'
    FIELD.NAME = 'CBSTXNREF':VM:'AT.UNIQUE.ID':VM:'MERCHANT.NAME':VM:'AT.AUTH.CODE'
    FIELD.POS = ''
    CALL MULTI.GET.LOC.REF(APPL,FIELD.NAME,FIELD.POS)
    CBSTXNREF.POS = FIELD.POS<1,1>
    UNIQ.ID.POS = FIELD.POS<1,2>
    MERCHANT.POS = FIELD.POS<1,3>
    AT.AUTH.CODE.POS = FIELD.POS<1,4>

    RECON.DIR = ''
    RECON.PATH = ''
    RECON.DIR = R.ATM.RECON.PARAMETER<ATM.REC.PARAM.RECON.FOLDER>
    RECON.PATH = ''
    OPEN RECON.DIR TO RECON.PATH ELSE
        EXECUTE "mkdir ":RECON.DIR
    END

    RECON.TEMP = 'RECON.TEMP'
    RECON.TEMP.PATH = ''

    OPEN RECON.TEMP TO RECON.TEMP.PATH ELSE
        EXECUTE "mkdir ":RECON.TEMP
        OPEN RECON.TEMP TO RECON.TEMP.PATH ELSE
            CRT 'Error in open Temp path'
        END
    END

    RECON.VISA.DIR = RECON.TEMP:'/VISA'
    RECON.VISA.PATH = ''
    OPEN RECON.VISA.DIR TO RECON.VISA.PATH ELSE
        EXECUTE "mkdir ":RECON.VISA.DIR
        OPEN RECON.VISA.DIR TO RECON.VISA.PATH ELSE
            CRT 'Error in open Visa Temp path'
        END
    END

    RECON.ATM.DIR = RECON.TEMP:'/ATM'
    RECON.ATM.PATH = ''
    OPEN RECON.ATM.DIR TO RECON.ATM.PATH ELSE
        EXECUTE "mkdir ":RECON.ATM.DIR
        OPEN RECON.ATM.DIR TO RECON.ATM.PATH ELSE
            CRT 'Error in open ATM Temp path'
        END
    END

    RECON.POS.DIR = RECON.TEMP:'/POS'
    RECON.POS.PATH = ''
    OPEN RECON.POS.DIR TO RECON.POS.PATH ELSE
        EXECUTE "mkdir ":RECON.POS.DIR
        OPEN RECON.POS.DIR TO RECON.POS.PATH ELSE
            CRT 'Error in open POS Temp path'

        END
    END

    RECON.INCO.DIR = RECON.TEMP:'/INCO'
    RECON.INCO.PATH = ''
    OPEN RECON.INCO.DIR TO RECON.INCO.PATH ELSE
        EXECUTE "mkdir ":RECON.INCO.DIR
        OPEN RECON.INCO.DIR TO RECON.INCO.PATH ELSE
            CRT 'Error in open INCO Temp path'
        END
    END

    RECON.OCW.DIR = RECON.TEMP:'/OCW'
    RECON.OCW.PATH = ''
    OPEN RECON.OCW.DIR TO RECON.OCW.PATH ELSE
        EXECUTE "mkdir ":RECON.OCW.DIR
        OPEN RECON.OCW.DIR TO RECON.OCW.PATH ELSE
            CRT 'Error in open OCW Temp path'
        END
    END

    RECON.COEX.DIR = RECON.TEMP:'/COEX'
    RECON.COEX.PATH = ''
    OPEN RECON.COEX.DIR TO RECON.COEX.PATH ELSE
        EXECUTE "mkdir ":RECON.COEX.DIR
        OPEN RECON.COEX.DIR TO RECON.COEX.PATH ELSE
            CRT 'Error in open COEX Temp path'
        END
    END

    YR.REQ.DATE = TODAY       ;*BATCH.DETAILS<3,1>
    YR.LAST.WORK.DAY = YR.REQ.DATE
    CALL CDT('',YR.LAST.WORK.DAY,'-1W')


    RETURN

****************
CONTROL.PROCESS:
****************

    GOSUB READ.FT.RECORD


    RETURN

STMT.PROCESS:
    YR.VISA.WRITE = ''
    YR.ATM.WRITE = ''
    YR.POS.WRITE = ''
    YR.INCO.WRITE = ''
    YR.OCW.WRITE = ''
    YR.COEX.WRITE = ''
    R.FT.REC = ''
    SYS.FIELD.NAME = REC.STORE<SSL.SYS.FIELD.NAME>
    CONVERT VM TO FM IN SYS.FIELD.NAME
    USR.FIELD.NAME = REC.STORE<SSL.USR.FIELD.NAME>
    CONVERT VM TO FM IN USR.FIELD.NAME

    SYS.FIELD.NO = REC.STORE<SSL.SYS.FIELD.NO>
    CONVERT VM TO FM IN SYS.FIELD.NO

    USR.FIELD.NO = REC.STORE<SSL.USR.FIELD.NO>
    CONVERT VM TO FM IN USR.FIELD.NO
    YR.OPEN.BAL = ''
    YR.SERIAL = ''
    CCY.DECIMAL = ''

    CALL F.READ(FN.ACCOUNT,REC.ID,REC.ACCT,F.ACCOUNT,AC.ERR)
    ACCT.CCY = REC.ACCT<AC.CURRENCY>
    CALL F.READ(FN.CCY,ACCT.CCY,R.CCY,F.CCY,CCY.ERR)
    CCY.DECIMAL = R.CCY<EB.CUR.NO.OF.DECIMALS>

* CAB20140211.3 -S
    YR.OPEN.BAL = REC.ACCT<AC.LOCAL.REF,BAL.AFT.TXN.POS>
* CAB20140211.3 -E
    REC.ID.TEMP = REC.ID
    CALL F.READ(FN.AC.SUB.ACCOUNT,REC.ID,R.AC.SUB.ACCOUNT,F.AC.SUB.ACCOUNT,SUB.ERR)
    IF R.AC.SUB.ACCOUNT THEN
        R.AC.SUB.ACCOUNT<-1> = REC.ID
        LOOP
            REMOVE SUB.ACCT FROM R.AC.SUB.ACCOUNT SETTING SUB.POS
        WHILE SUB.ACCT:SUB.POS
            REC.ID = SUB.ACCT
            GOSUB GET.EXTRACT.ENTRIES
        REPEAT
    END ELSE
        GOSUB GET.EXTRACT.ENTRIES
    END

*    GOSUB WRITE.FILE

    Y.ACC.DATA = ''
    Y.TIME=''
    CUR.DATE=''
    Y.TODAY =''
    Y.DATETIME = TIMEDATE()
    Y.TIME = Y.DATETIME[1,8]
    CONVERT ":" TO "_" IN Y.TIME
    CUR.DATE = OCONV(DATE(),"D4/E")
    Y.TODAY = CUR.DATE[7,4]:CUR.DATE[4,2]:CUR.DATE[1,2]
    WRITELIST FINAL.FT.RECORD TO "FINAL.FT.RECORD_":Y.TODAY:"_":Y.TIME:".csv"
    WRITELIST FINAL.FT.RECORD.FINAL TO "FINAL.FT.RECORD.FINAL_":Y.TODAY:"_":Y.TIME:".csv"
    WRITELIST TEMP.R.FT.REC.NEW.UPD TO "TEMP.R.FT.REC.NEW.UPD_":Y.TODAY:"_":Y.TIME:".csv"

* CAB20140211.2 -S
*    REC.ACCT<AC.LOCAL.REF,BAL.AFT.TXN.POS> = YR.OPEN.BAL.FINAL
**    CALL F.READU(FN.ACCOUNT,REC.ID,REC.ACCT,F.ACCOUNT,ACC.ERR,'P')
**    IF REC.ACCT THEN
**        REC.ACCT<AC.LOCAL.REF,BAL.AFT.TXN.POS> = TRIM(YR.OPEN.BAL.FINAL,"",'D')
**        CALL F.WRITE(FN.ACCOUNT,REC.ID,REC.ACCT)
**    END
* CAB20140211.2 -E

    RETURN

GET.EXTRACT.ENTRIES:


    R.ACCT.STMT = '' ; ACCT.STMT.ERR = ''

    CALL F.READ(FN.ACCT.STMT,REC.ID,R.ACCT.STMT,F.ACCT.STMT,ACCT.STMT.ERR)
    IF R.ACCT.STMT THEN
        Y.CURRENT.FQU = R.ACCT.STMT<AC.STA.STMT.FQU.1>[1,8]
        Y.LAST.FQU = R.ACCT.STMT<AC.STA.FQU1.LAST.DATE>
    END

    R.ACCT.STMT.PRINT = ''
    ACCT.STMT.ERR = ''
    CALL F.READ(FN.ACCT.STMT.PRINT,REC.ID,R.ACCT.STMT.PRINT,F.ACCT.STMT.PRINT,ACCT.STMT.ERR)

    LOCATE YR.REQ.DATE IN R.ACCT.STMT.PRINT BY "AL" SETTING STMT.POS ELSE
        NULL
    END


    STATEMENT.DATE = R.ACCT.STMT.PRINT<STMT.POS>['/',1,1]


    Y.STMT.ID = REC.ID:'-':STATEMENT.DATE
    GOSUB EXTRACT.ENTRIES
*    IF YR.LAST.WORK.DAY EQ Y.LAST.FQU THEN        ;*CAB20141022 S
    IF YR.LAST.WORK.DAY LE Y.LAST.FQU THEN        ;*CAB20141022 E
        Y.STMT.ID = REC.ID:'-':Y.LAST.FQU
        GOSUB EXTRACT.ENTRIES
    END

*    GOSUB EXTRACT.ENTRIES

    RETURN
*-----------------------------------------------------------------------------------------------
EXTRACT.ENTRIES:

*    CALL F.READ(FN.ACCT.ENT.LWORK.DAY,REC.ID,R.ACCT.ENT.LWORK.DAY,F.ACCT.ENT.LWORK.DAY,ACCT.ENT.ERR)
*    CALL F.READ(FN.ACCT.ENT.TODAY,REC.ID,R.ACCT.ENT.TODAY,F.ACCT.ENT.TODAY,ACCT.ENT.TODAY.ERR)
*    CALL F.READ(FN.ACCT.ENT.FWD,REC.ID,R.ACCT.ENT.FWD,F.ACCT.ENT.FWD,ACCT.ENT.FWD.ERR)
*    R.ACCT.ENTRY = R.ACCT.ENT.LWORK.DAY:FM:R.ACCT.ENT.TODAY:FM:R.ACCT.ENT.FWD
    Y.STMT.ID = REC.ID:'-20141207'
    STMT.PRINT.ERR = '' ; R.STMT.PRINTED = '' ; R.ACCT.ENTRY = ''
    CALL F.READ(FN.STMT.PRINTED,Y.STMT.ID,R.STMT.PRINTED,F.STMT.PRINTED,STMT.PRINT.ERR)
    IF R.STMT.PRINTED THEN
        R.ACCT.ENTRY = R.STMT.PRINTED
        LOOP
            REMOVE YR.STMT.ID FROM R.ACCT.ENTRY SETTING STMT.POS
        WHILE YR.STMT.ID:STMT.POS
            YR.FIELD.VALUE.FINAL = ''
            IF YR.STMT.ID[1,1] EQ 'S' THEN
                STMT.CNT = 1
                LOOP
                    STMT.XREF.ID = YR.STMT.ID:'-':STMT.CNT
                    R.STMT.ENTRY.DETAIL.XREF = ''
                    XREF.ERR = ''
                    CALL F.READ(FN.STMT.ENTRY.DETAIL.XREF,STMT.XREF.ID,R.STMT.ENTRY.DETAIL.XREF,F.STMT.ENTRY.DETAIL.XREF,XREF.ERR)
                WHILE NOT(XREF.ERR)
                    STMT.CNT+=1
                    LOOP
                        REMOVE STMT.ID FROM R.STMT.ENTRY.DETAIL.XREF SETTING XREF.POS
                    WHILE STMT.ID:XREF.POS
                        GOSUB READ.STMT.ENTRY
                    REPEAT
                REPEAT
            END ELSE
                STMT.ID = YR.STMT.ID
                GOSUB READ.STMT.ENTRY
            END
        REPEAT

    END

    RETURN

READ.STMT.ENTRY:

    CALL F.READ(FN.STMT.ENTRY,STMT.ID,R.STMT.ENTRY,F.STMT.ENTRY,STMT.ENT.ERR)
    IF R.STMT.ENTRY EQ '' THEN
        CALL F.READ(FN.STMT.ENTRY.DETAIL,STMT.ID,R.STMT.ENTRY,F.STMT.ENTRY.DETAIL,STMT.ENT.DET.ERR)
    END
    R.STMT.DATE = R.DATES(EB.DAT.LAST.WORKING.DAY)[1,2]:R.STMT.ENTRY<AC.STE.DATE.TIME>[1,6]
    PRINT "STMT.ID  ":STMT.CNT:" )":STMT.ID
*    IF R.STMT.DATE LT YR.REQ.DATE AND R.STMT.DATE GE YR.LAST.WORK.DAY THEN
    PRINT "STMT.ID  INSIDE ":STMT.CNT:" )":STMT.ID
    GOSUB CONTROL.PROCESS
*    END
**Fwd Entry /S
**    IF R.STMT.DATE GT R.STMT.ENTRY<AC.STE.VALUE.DATE> AND R.STMT.DATE GE R.DATES(EB.DAT.LAST.WORKING.DAY) THEN
**        GOSUB CONTROL.PROCESS
**    END
**Fwd Entry /E

    RETURN

COMMON.PROCESS:

    YR.FIELD.VALUE.FINAL = ''
    FIELD.DCOUNT = DCOUNT(R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.LENGTH>,VM)
    CNT = 1
    LOOP
    WHILE CNT LE FIELD.DCOUNT
        YR.FIELD.VALUE = ''
        YR.FIELD.NAME = R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT>
        YR.FIELD.LENGTH = R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.LENGTH,CNT>
        LOCATE YR.FIELD.NAME IN SYS.FIELD.NAME<1> SETTING SYSPOS THEN
            SYS.FIELD.VALUE = SYS.FIELD.NAME<SYSPOS>
            SYS.FIELD.NUMBER = SYS.FIELD.NO<SYSPOS,1>
            YR.FIELD.VALUE = R.STMT.ENTRY<SYS.FIELD.NUMBER>
        END ELSE
            LOCATE YR.FIELD.NAME IN USR.FIELD.NAME<1> SETTING USRPOS THEN
                USR.FIELD.VALUE = USR.FIELD.NAME<USRPOS,1>
                USR.FIELD.NO = USR.FIELD.NO<USRPOS,1>
                YR.FIELD.VALUE = R.STMT.ENTRY<USR.FIELD.NO>
            END
        END
        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'BALANCE' THEN
            GOSUB ADD.BALANCE
            YR.FIELD.VALUE = YR.OPEN.BAL.FINAL
        END
**
        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'ACCOUNT.NUMBER' THEN
            YR.FIELD.VALUE = REC.ID.TEMP
        END
**
        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'SERIAL' THEN
            GOSUB ADD.SERIAL
            YR.FIELD.VALUE = YR.SERIAL.FINAL
        END

        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'CHQ.SERIAL' THEN
            GOSUB READ.FT.RECORD
*            IF INDEX(R.FT.REC<FT.INPUTTER>,'ECCUSER',1) THEN
            YR.FIELD.VALUE = R.FT.REC<FT.CHEQUE.NUMBER>
*            END
        END

        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'CBS.TRANS.REF' THEN
            IF R.FT.REC EQ '' THEN
                GOSUB READ.FT.RECORD
            END
            YR.FIELD.VALUE = R.FT.REC<FT.LOCAL.REF,CBSTXNREF.POS>
        END

        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.RTN,CNT> THEN
            FLD.RTN = R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.RTN,CNT>
            RET.VALUE = ''
            FLD.VALUE = YR.FIELD.NAME
            CALL @FLD.RTN(FLD.VALUE,RET.VALUE,R.STMT.ENTRY)
            IF FLD.VALUE EQ 'AMOUNT' THEN
                YR.FIELD.VALUE = FMT(RET.VALUE,"R#":YR.FIELD.LENGTH)
            END ELSE
                YR.FIELD.VALUE = RET.VALUE
            END
        END

**Changes for AT.AUTH.CODE and POS type/S
        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.FIELD.NAME,CNT> EQ 'TREF' AND CONTROL.LIST<1,1> EQ 'POS' THEN
            YR.TEMP.FIELD.VALUE = ''
            R.FT.REC = ''
            IF R.FT.REC EQ '' THEN
                GOSUB READ.FT.RECORD
            END
            YR.TEMP.FIELD.VALUE = R.FT.REC<FT.LOCAL.REF,AT.AUTH.CODE.POS>

            IF YR.TEMP.FIELD.VALUE THEN
                YR.FIELD.VALUE = YR.TEMP.FIELD.VALUE
            END
        END
**Changes for AT.AUTH.CODE and POS type/E


        IF R.ATM.RECON.MAPPING<ATM.REC.MAP.STATIC.VALUE,CNT> THEN
            YR.FIELD.VALUE = R.ATM.RECON.MAPPING<ATM.REC.MAP.STATIC.VALUE,CNT>
        END
        IF YR.FIELD.NAME NE 'AMOUNT' OR YR.FIELD.NAME NE 'SERIAL' OR YR.FIELD.NAME NE 'BALANCE' THEN
            YR.FIELD.VALUE = FMT(YR.FIELD.VALUE,"L#":YR.FIELD.LENGTH)
        END
        YR.FIELD.VALUE.FINAL:=YR.FIELD.VALUE
        CNT+=1
    REPEAT
    RETURN

ADD.BALANCE:


*Changes for Opening balance if the account is inactive for previous month
    ACT.DATE = TODAY
    V.YEAR = ACT.DATE[1,4]
    V.MONTH = ACT.DATE[5,2]
    V.DAY = ACT.DATE[7,2]
    CALL CDT('',ACT.DATE,'-2W')
    ACT.ID = REC.ID:'-':ACT.DATE[1,6]
    ACT.DAYS = ACT.DATE[7,2]

    IF YR.OPEN.BAL EQ '' THEN
        LOOP
            ACT.ID = REC.ID:"-":V.YEAR:V.MONTH
            ACT.ERR = ''
            CALL F.READ(FN.ACCT.ACT, ACT.ID, R.ACCT.ACT, F.ACCT.ACT, ACT.ERR)

            IF ACT.ERR THEN R.ACCT.ACT = ''
            LOCATE V.DAY IN R.ACCT.ACT<IC.ACT.DAY.NO,1> BY "A" SETTING DAY.POS THEN       ;* Get today's balance
                BALANCE.OBTAINED = TRUE
            END ELSE
                DAY.POS = DAY.POS - 1
                IF (R.ACCT.ACT EQ '') OR (DAY.POS EQ 0 ) OR (R.ACCT.ACT<IC.ACT.DAY.NO, DAY.POS> EQ '') THEN
                    V.DAY = 31
                    IF V.MONTH = 01 THEN
                        V.MONTH = 12
                        V.YEAR = V.YEAR - 1
                    END ELSE
                        V.MONTH = V.MONTH - 1
                    END

                    V.MONTH = FMT(V.MONTH, '2"0"R')
                    V.DAY = FMT(V.DAY, '2"0"R')
                    TEMP.DATE = V.YEAR:V.MONTH:V.DAY

                END ELSE
                    V.DAY = R.ACCT.ACT<IC.ACT.DAY.NO, DAY.POS>
                    BALANCE.OBTAINED = TRUE
                END
            END
        UNTIL (BALANCE.OBTAINED)
        REPEAT
    END

    IF BALANCE.OBTAINED THEN
        V.BALANCE = R.ACCT.ACT<IC.ACT.BALANCE, DAY.POS>
    END ELSE
        V.BALANCE = REC.ACCT<AC.WORKING.BALANCE>
    END

    IF NOT(YR.OPEN.BAL) THEN
        YR.OPEN.BAL = V.BALANCE
    END



    IF R.STMT.ENTRY<AC.STE.AMOUNT.FCY> THEN
        YR.AMOUNT = R.STMT.ENTRY<AC.STE.AMOUNT.FCY>
    END ELSE
        YR.AMOUNT = R.STMT.ENTRY<AC.STE.AMOUNT.LCY>
    END
**Fwd mvmt changes/S
**    IF R.STMT.ENTRY<AC.STE.VALUE.DATE> LT R.STMT.ENTRY<AC.STE.BOOKING.DATE> THEN
**        RETURN
**    END
**Fwd mvmt changes/E
    YR.OPEN.BAL= YR.OPEN.BAL + YR.AMOUNT

    YR.OPEN.BAL = FMT(YR.OPEN.BAL,'R':CCY.DECIMAL)
    IF YR.OPEN.BAL GT '0' THEN
        YR.OPEN.BAL = '+':YR.OPEN.BAL
    END

    YR.OPEN.BAL.FINAL = FMT(YR.OPEN.BAL,"R#":YR.FIELD.LENGTH)
    RETURN

ADD.SERIAL:
    IF YR.SERIAL EQ '' THEN
        YR.SERIAL = '1'
    END ELSE
        YR.SERIAL= YR.SERIAL+1
    END
    YR.SERIAL.FINAL = FMT(YR.SERIAL,"R%":YR.FIELD.LENGTH)
    RETURN

VISA.PROCESS:
    GOSUB COMMON.PROCESS
    YR.VISA.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

ATM.PROCESS:
    GOSUB COMMON.PROCESS
    YR.ATM.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

POS.PROCESS:
    GOSUB COMMON.PROCESS
    YR.POS.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

INCO.PROCESS:
    GOSUB COMMON.PROCESS
    YR.INCO.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

OCW.PROCESS:
    GOSUB COMMON.PROCESS
    YR.OCW.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

COEX.PROCESS:
    GOSUB COMMON.PROCESS
    YR.COEX.WRITE<-1> = YR.FIELD.VALUE.FINAL
    RETURN

WRITE.FILE:
    BEGIN CASE
    CASE CONTROL.LIST<1,1> EQ 'VISA'
        WRITE YR.VISA.WRITE TO RECON.VISA.PATH,REC.ID ON ERROR
            CRT 'Error on write to Visa Directory'
        END
    CASE CONTROL.LIST<1,1> EQ 'ATM'
        WRITE YR.ATM.WRITE TO RECON.ATM.PATH,REC.ID ON ERROR
            CRT 'Error on write to ATM Directory'
        END
    CASE CONTROL.LIST<1,1> EQ 'POS'
        WRITE YR.POS.WRITE TO RECON.POS.PATH,REC.ID ON ERROR
            CRT 'Error on write to POS Directory'
        END
    CASE CONTROL.LIST<1,1> EQ 'INCO'
        WRITE YR.INCO.WRITE TO RECON.INCO.PATH,REC.ID ON ERROR
            CRT 'Error on write to INCO Directory'
        END
    CASE CONTROL.LIST<1,1> EQ 'OCW'
        WRITE YR.OCW.WRITE TO RECON.OCW.PATH,REC.ID ON ERROR
            CRT 'Error on write to OCW Directory'
        END
    CASE CONTROL.LIST<1,1> EQ 'COEX'
        WRITE YR.COEX.WRITE TO RECON.COEX.PATH,REC.ID ON ERROR
            CRT 'Error on write to COEX Directory'
        END
    END CASE
    RETURN

READ.FT.RECORD:

    TRANS.REF = FIELD(R.STMT.ENTRY<AC.STE.TRANS.REFERENCE>,'\',1)

    R.FT.REC = ''
    IF TRANS.REF[1,2] EQ 'FT' THEN
        CALL EB.READ.HISTORY.REC(F.FUNDS.TRANSFER$HIS,TRANS.REF,R.FT.REC,FTH.ERR)
        IF R.FT.REC ELSE
            TRANS.REF = FIELD(R.STMT.ENTRY<AC.STE.TRANS.REFERENCE>,'\',1)
            CALL F.READ(FN.FUNDS.TRANSFER,TRANS.REF,R.FT.REC,F.FUNDS.TRANSFER,FT.ERR)
        END
        IF R.FT.REC<FT.CREDIT.ACCT.NO> EQ 'JOD1711400841012' THEN

        END
        IF R.FT.REC<FT.CREDIT.ACCT.NO> EQ 'JOD1711400841012' AND R.FT.REC<FT.TRANSACTION.TYPE> EQ 'ACAW' THEN
            PRINT R.FT.REC
            FINAL.FT.RECORD<-1> = R.FT.REC<FT.CO.CODE>:",":R.FT.REC<FT.TRANSACTION.TYPE>:",JOD1711400841012,":R.FT.REC<FT.DEBIT.CURRENCY>:",":R.FT.REC<FT.DEBIT.VALUE.DATE>:",":R.FT.REC<FT.CREDIT.AMOUNT>:",JOD1711400941012,":R.FT.REC<FT.CREDIT.VALUE.DATE>:",":TRANS.REF
        END
        IF R.FT.REC<FT.CREDIT.ACCT.NO> EQ 'JOD1711400841012' THEN
            TEMP.R.FT.REC.NEW = ''
            TEMP.R.FT.REC.NEW = R.FT.REC
            FINAL.FT.RECORD.FINAL<-1> = R.FT.REC<FT.CO.CODE>:",":R.FT.REC<FT.TRANSACTION.TYPE>:",JOD1711400841012,":R.FT.REC<FT.DEBIT.CURRENCY>:",":R.FT.REC<FT.DEBIT.VALUE.DATE>:",":R.FT.REC<FT.CREDIT.AMOUNT>:",JOD1711400941012,":R.FT.REC<FT.CREDIT.VALUE.DATE>:",":TRANS.REF
            CONVERT VM TO SM IN TEMP.R.FT.REC.NEW
            CONVERT FM TO VM IN TEMP.R.FT.REC.NEW
            TEMP.R.FT.REC.NEW.UPD<-1> = TEMP.R.FT.REC.NEW
        END

    END
    RETURN
END
